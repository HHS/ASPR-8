package nucleus.somethingborrowed;

import nucleus.Event;

/**
 * 
 * A generics-based class that is used to filter event observations.
 * 
 * When an actor subscribes to observe a particular type of event, it may need
 * to filter such events.
 * 
 * For example, suppose a fox(actor) has subscribed to actor movement events.
 * The fox is only interested in rabbits that are close by and is unconcerned
 * with distant rabbits or other animals. When the fox subscribes to movement
 * event observation, it uses an event label to describe this filtering. When
 * any animal moves, a movement observation event is generated by some plugin.
 * Nucleus will then generate an event label from the event using a registered
 * event-labeler. If this generated event label matches, via equality, the event
 * label used by the fox, then the fox will receive the movement observation
 * event.
 * 
 * Event labels are paired with event labelers. A data manager registers an
 * event labeler in anticipation of actors needing to use the corresponding
 * event labels. Event labels remain active until the actor unsubscribes them.
 * 
 * 
 * @author Shawn Hatch
 *
 * @param <T>
 */
public interface EventLabelXYZ<T extends Event> {

	
	public Class<T> getEventClass();

	
	public EventLabelerXYZ<T> getLabeler();

	
	public Object getPrimaryKeyValue();

	

	@Override
	public boolean equals(Object obj);

	
	@Override
	public int hashCode();

}
