package nucleus;

/**
 * 
 * A generics-based class that is used to filter event observations.
 * 
 * When an actor subscribes to observe a particular type of event, it may need
 * to filter such events.
 * 
 * For example, suppose a fox(actor) has subscribed to actor movement events.
 * The fox is only interested in rabbits that are close by and is unconcerned
 * with distant rabbits or other animals. When the fox subscribes to movement
 * event observation, it uses an event label to describe this filtering. When
 * any animal moves, a movement observation event is generated by some plugin.
 * Nucleus will then generate an event label from the event using a registered
 * event-labeler. If this generated event label matches, via equality, the event
 * label used by the fox, then the fox will receive the movement observation
 * event.
 * 
 * Event labels are paired with event labelers. A data manager registers an
 * event labeler in anticipation of actors needing to use the corresponding
 * event labels. Event labels remain active until the actor unsubscribes them.
 * 
 * 
 * @author Shawn Hatch
 *
 * @param <T>
 */
public interface EventLabel<T extends Event> {

	/**
	 * Returns the event subclass that this label applies to.
	 */
	public Class<T> getEventClass();

	/**
	 * Returns the labeler id associated with this label. Labels can only be
	 * compared to other labels that share the same labeler id.
	 */
	public EventLabelerId getLabelerId();

	/**
	 * Returns the primary key value of any event that this label matches. This
	 * provides efficiency to the publication/subscription process and does not
	 * replace the equality comparison between labels. This label will only be
	 * matched to events that have the same primary key.
	 */
	public Object getPrimaryKeyValue();

	/**
	 * WARNING, NON-STANDARD EQUALS CONTRACT: Nucleus only checks for equality
	 * between event labels when those labels have the same primary keys, event
	 * class types and labeler ids. Thus, within the confines of nucleus, the
	 * equality contract can ignore these values to gain efficiency.
	 */

	@Override
	public boolean equals(Object obj);

	/**
	 * WARNING, NON-STANDARD EQUALS CONTRACT: Nucleus only checks for equality
	 * between event labels when those labels have the same primary keys, event
	 * class types and labeler ids. Thus, within the confines of nucleus, the
	 * equality contract can ignore these values to gain efficiency.
	 */
	@Override
	public int hashCode();

}
