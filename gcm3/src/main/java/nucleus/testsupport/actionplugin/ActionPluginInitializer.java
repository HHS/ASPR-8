package nucleus.testsupport.actionplugin;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import nucleus.AgentId;
import nucleus.DataView;
import nucleus.EventLabeler;
import nucleus.PluginContext;
import nucleus.PluginId;
import nucleus.PluginInitializer;
import nucleus.DataManagerContext;
import nucleus.ResolverId;
import nucleus.SimplePluginId;
import plugins.reports.ReportId;

/**
 * Test Support plugin that is designed to work with a unit testing framework.
 * It provides for 1)the injection of behavior into agents to test various
 * simulation behaviors in a function/system setting and 2) the collection of
 * observed events for comparison to expectations.
 * 
 * @author Shawn Hatch
 *
 */
public class ActionPluginInitializer implements PluginInitializer{
	
	private final Scaffold scaffold;

	private ActionPluginInitializer(Scaffold scaffold) {
		this.scaffold = scaffold;
	}

	public static Builder builder() {
		return new Builder();
	}

	private static class Scaffold {
		/*
		 * Map of action plans key by agent aliases
		 */
		private final Map<Object, List<AgentActionPlan>> agentActionPlanMap = new LinkedHashMap<>();


		private final Map<ResolverId, List<DataManagerActionPlan>> resolverActionPlanMap = new LinkedHashMap<>();

		/*
		 * Stores the resolvers that will be added to the simulation
		 */

		private Set<ResolverId> resolvers = new LinkedHashSet<>();
		/*
		 * Stores the reports that will be added to the simulation
		 */
		private Set<ReportId> reports = new LinkedHashSet<>();

		/*
		 * Stores the data views that will be publish by the ActionResolver
		 */
		private List<DataView> dataViews = new ArrayList<>();

		/*
		 * Contains the alias values for which agent construction must be
		 * handled by the ActionResolver
		 */
		private Set<Object> agentAliasesMarkedForConstruction = new LinkedHashSet<>();

		/*
		 * List of stored event labelers
		 */
		private List<EventLabeler<?>> eventLabelers = new ArrayList<>();

	}

	public static class Builder {
		private Scaffold scaffold = new Scaffold();

		private Builder() {
		}

		/**
		 * Returns the Action Plugin generated by the collected data and clears
		 * the builder's state.
		 */
		public ActionPluginInitializer build() {
			try {
				return new ActionPluginInitializer(scaffold);
			} finally {
				scaffold = new Scaffold();
			}
		}

		/**
		 * Stores a data view for publication into the simulation
		 * 
		 * @throws RuntimeException
		 *             <li>if the data view is null
		 * 
		 * 
		 */
		public void addDataView(DataView dataView) {
			if (dataView == null) {
				throw new RuntimeException("null data view");

			}
			scaffold.dataViews.add(dataView);
		}

		/**
		 * Adds an agent action plan associated with the alias
		 * 
		 * @throws RuntimeException
		 *             <li>if the alias is null</li>
		 *             <li>if the agent action plan is null</li>
		 */
		public Builder addAgentActionPlan(final Object alias, AgentActionPlan agentActionPlan) {
			if (alias == null) {
				throw new RuntimeException("null alias");
			}
			if (agentActionPlan == null) {
				throw new RuntimeException("null action plan");
			}

			List<AgentActionPlan> list = scaffold.agentActionPlanMap.get(alias);

			if (list == null) {
				list = new ArrayList<>();
				scaffold.agentActionPlanMap.put(alias, list);
			}

			list.add(agentActionPlan);

			return this;
		}

		public Builder addResolverActionPlan(final ResolverId resolverId, DataManagerActionPlan dataManagerActionPlan) {
			if (resolverId == null) {
				throw new RuntimeException("null resolver id");
			}
			if (dataManagerActionPlan == null) {
				throw new RuntimeException("null action plan");
			}

			List<DataManagerActionPlan> list = scaffold.resolverActionPlanMap.get(resolverId);

			if (list == null) {
				list = new ArrayList<>();
				scaffold.resolverActionPlanMap.put(resolverId, list);
			}

			list.add(dataManagerActionPlan);

			return this;
		}

		public Builder addReportActionPlan(final ReportId reportId, ReportActionPlan reportActionPlan) {
			if (reportId == null) {
				throw new RuntimeException("null report id");
			}

			if (reportActionPlan == null) {
				throw new RuntimeException("null action plan");
			}

			List<ReportActionPlan> list = scaffold.reportActionPlanMap.get(reportId);

			if (list == null) {
				list = new ArrayList<>();
				scaffold.reportActionPlanMap.put(reportId, list);
			}

			list.add(reportActionPlan);

			return this;
		}

		/**
		 * Stores a resolver view for addition to the simulation
		 * 
		 * @throws RuntimeException
		 *             <li>if the resolver id is null
		 *             <li>if the resolver is null
		 *             <li>if the resolver id was previously added
		 */
		public Builder addResolver(ResolverId resolverId) {

			if (resolverId == null) {
				throw new RuntimeException("null resolver id");
			}

			if (scaffold.resolvers.contains(resolverId)) {
				throw new RuntimeException("duplicate resolver id");
			}
			scaffold.resolvers.add(resolverId);
			return this;
		}

		public Builder addReport(ReportId reportId) {

			if (reportId == null) {
				throw new RuntimeException("null report id");
			}

			if (scaffold.reports.contains(reportId)) {
				throw new RuntimeException("duplicate report id");
			}
			scaffold.reports.add(reportId);
			return this;
		}

		/**
		 * Causes the action plugin to create the agent as an ActionAgent
		 * 
		 * @throws RuntimeException
		 *             <li>if the alias is null
		 * 
		 */
		public Builder addAgent(Object alias) {
			if (alias == null) {
				throw new RuntimeException("null alias");
			}
			scaffold.agentAliasesMarkedForConstruction.add(alias);
			return this;
		}

		/**
		 * Stores an event labeler that will be added to nucleus by the
		 * ActionResolver. Note that event labelers must be unique(by id) and
		 * well formed. See {@link EventLabeler} for details.
		 * 
		 */
		public Builder addEventLabeler(EventLabeler<?> eventLabeler) {
			if (eventLabeler == null) {
				throw new RuntimeException("null event labeler");
			}
			scaffold.eventLabelers.add(eventLabeler);
			return this;
		}

	}

	private static class ActionResolverId implements ResolverId {
		public String toString() {
			return getClass().getSimpleName();
		}
	}

	private void handleAliasAssignmentEventValidation(DataManagerContext dataManagerContext, AliasAssignmentEvent event) {
		if (event.getAlias() == null) {
			throw new RuntimeException("null alias");
		}
		Optional<Object> optional = actionDataContainer.getAgentAliasId(dataManagerContext.getCurrentAgentId());
		if (optional.isPresent()) {
			throw new RuntimeException("alias already asssigned " + dataManagerContext.getCurrentAgentId() + ": " + optional.get());
		}
	}

	private void handleAliasAssignmentEventExecution(DataManagerContext dataManagerContext, AliasAssignmentEvent event) {
		actionDataContainer.assignAgentIdToAlias(event.getAlias(), dataManagerContext.getCurrentAgentId());
	}

	private ActionDataContainer actionDataContainer;

	/**
	 * Provides a consumer of PluginContext. The plugin defines a single
	 * resolver that 1)handles AliasAssignmentEvent events, 2)initializes
	 * publishes and maintains the ActionDataView, 3)creates client agents, 4)
	 * creates client reports, 5) creates client resolvers, 6) publishes client
	 * data views, 7) adds client event labelers.
	 * 
	 * @throws RuntimeException
	 *             <li>if the pluginContext is null</li>
	 */
	public void init(PluginContext pluginContext) {
		if (pluginContext == null) {
			throw new RuntimeException("null plugin context");
		}

		pluginContext.defineResolver(new ActionResolverId(), (DataManagerContext dataManagerContext) -> {
			dataManagerContext.subscribeToEventValidationPhase(AliasAssignmentEvent.class, this::handleAliasAssignmentEventValidation);
			dataManagerContext.subscribeToEventExecutionPhase(AliasAssignmentEvent.class, this::handleAliasAssignmentEventExecution);

			actionDataContainer = new ActionDataContainer();

			// transfer the agent action plans to the data view to allow
			// the
			// agents to access their plans
			for (Object alias : scaffold.agentActionPlanMap.keySet()) {
				List<AgentActionPlan> agentActionPlans = scaffold.agentActionPlanMap.get(alias);
				for (AgentActionPlan agentActionPlan : agentActionPlans) {
					actionDataContainer.addAgentActionPlan(alias, agentActionPlan);
				}
			}

			// transfer the report action plans to the data view to
			// allow the
			// reports to access their plans
			for (ReportId reportId : scaffold.reportActionPlanMap.keySet()) {
				List<ReportActionPlan> reportActionPlans = scaffold.reportActionPlanMap.get(reportId);
				for (ReportActionPlan reportActionPlan : reportActionPlans) {
					actionDataContainer.addReportActionPlan(reportId, reportActionPlan);
				}
			}

			// transfer the resolver action plans to the data view to
			// allow the
			// resolvers to access their plans
			for (ResolverId resolverId : scaffold.resolverActionPlanMap.keySet()) {
				List<DataManagerActionPlan> resolverActionPlans = scaffold.resolverActionPlanMap.get(resolverId);
				for (DataManagerActionPlan resolverActionPlan : resolverActionPlans) {
					actionDataContainer.addResolverActionPlan(resolverId, resolverActionPlan);
				}
			}

			// create and publish the data view
			ActionDataView actionDataView = new ActionDataView(actionDataContainer);
			dataManagerContext.publishDataView(actionDataView);

			// publish the auxiliary data views
			for (DataView dataView : scaffold.dataViews) {
				dataManagerContext.publishDataView(dataView);
			}

			// add the event labelers that will support agent
			// subscription to events
			for (EventLabeler<?> eventLabeler : scaffold.eventLabelers) {
				dataManagerContext.addEventLabeler(eventLabeler);
			}

			// add agents that need construction by the action plugin
			for (Object alias : scaffold.agentAliasesMarkedForConstruction) {
				AgentId agentId = dataManagerContext.getAvailableAgentId();
				dataManagerContext.addAgent(new ActionAgent(alias)::init, agentId);
			}

			// add the action reports
			for (ReportId reportId : scaffold.reports) {
				dataManagerContext.addReport(reportId, new ActionReport()::init);
			}

		});

		for (ResolverId resolverId : scaffold.resolvers) {
			pluginContext.defineResolver(resolverId, new ActionResolver()::init);
		}

	}

	/**
	 * Return true if and only if all actions that are stored in this action
	 * data view have been executed. Indicates that all injected behaviors in a
	 * unit test were actually executed. RETURNS FALSE IF THERE WERE NO ACTIONS
	 * STORED.
	 */
	public boolean allActionsExecuted() {
		boolean actionsContained = false;
		for (List<AgentActionPlan> agentActionPlans : scaffold.agentActionPlanMap.values()) {
			for (AgentActionPlan agentActionPlan : agentActionPlans) {
				actionsContained = true;
				if (!agentActionPlan.executed()) {
					return false;
				}
			}
		}

		for (List<ReportActionPlan> reportActionPlans : scaffold.reportActionPlanMap.values()) {
			for (ReportActionPlan reportActionPlan : reportActionPlans) {
				actionsContained = true;
				if (!reportActionPlan.executed()) {
					return false;
				}
			}
		}

		for (List<DataManagerActionPlan> reportActionPlans : scaffold.resolverActionPlanMap.values()) {
			for (DataManagerActionPlan dataManagerActionPlan : reportActionPlans) {
				actionsContained = true;
				if (!dataManagerActionPlan.executed()) {
					return false;
				}
			}
		}

		return actionsContained;
	}

	@Override
	public PluginId getPluginId() {
		return PLUGIN_ID;
	}

}
