package plugins.reports.initialdata;

import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Supplier;

import net.jcip.annotations.Immutable;
import nucleus.DataView;
import nucleus.ReportContext;
import nucleus.ReportId;
import plugins.reports.support.ReportError;
import util.ContractException;

/**
 * An immutable container of the initial state reports. It contains: <BR>
 * <ul>
 * <li>report ids</li>
 * <li>suppliers of consumers of {@linkplain ReportContext} for report
 * initialization</li>
 * </ul>
 * 
 * @author Shawn Hatch
 *
 */
@Immutable
public final class ReportsInitialData implements DataView {

	private static class Data {
		private Map<ReportId, Supplier<Consumer<ReportContext>>> reportMap = new LinkedHashMap<>();
	}

	public final static Builder builder() {
		return new Builder();
	}

	public final static class Builder {
		private Data data = new Data();

		private Builder() {

		}

		/**
		 * Returns the {@link ReportsInitialData} from the input collected by
		 * this builder. Clears the state of the builder.
		 */
		public ReportsInitialData build() {
			try {
				return new ReportsInitialData(data);
			} finally {
				data = new Data();
			}
		}

		/**
		 * Adds the report via its id and it initial behavior as supplied by the
		 * given supplier.
		 * 
		 * @throws ContractException
		 *             <li>{@linkplain ReportError#NULL_REPORT_ID} if the report
		 *             id is null</li>
		 *             <li>{@linkplain ReportError#NULL_SUPPLIER} if the
		 *             supplier is null</li>
		 *             <li>{@linkplain ReportError#DUPLICATE_REPORT} if report
		 *             id was previously added</li>
		 */
		public Builder addReport(ReportId reportId, Supplier<Consumer<ReportContext>> supplier) {
			if (reportId == null) {
				throw new ContractException(ReportError.NULL_REPORT_ID);
			}
			if (supplier == null) {
				throw new ContractException(ReportError.NULL_SUPPLIER);
			}
			if (data.reportMap.containsKey(reportId)) {
				throw new ContractException(ReportError.DUPLICATE_REPORT);
			}
			data.reportMap.put(reportId, supplier);
			return this;
		}

	}

	private final Data data;

	private ReportsInitialData(Data data) {
		this.data = data;
	}

	/**
	 * Returns the set of active report ids
	 */
	public Set<ReportId> getReportIds() {
		return new LinkedHashSet<>(data.reportMap.keySet());
	}

	/**
	 * Returns the Consumer of ReportContext associated with the given report id
	 * 
	 * @throws ContractException
	 *             <li>{@linkplain ReportError#NULL_REPORT_ID} if the report id
	 *             is null</li>
	 *             <li>{@linkplain ReportError#UNKNOWN_REPORT_ID} if the report
	 *             id is unknown</li>
	 *             <li>{@linkplain ReportError#NULL_CONSUMER} if the consumer
	 *             generated by the supplier is null</li>
	 */
	public Consumer<ReportContext> getReportInitialBehavior(ReportId reportId) {
		if (reportId == null) {
			throw new ContractException(ReportError.NULL_REPORT_ID);
		}

		Supplier<Consumer<ReportContext>> supplier = data.reportMap.get(reportId);
		if (supplier == null) {
			throw new ContractException(ReportError.UNKNOWN_REPORT_ID, reportId);
		}

		Consumer<ReportContext> consumer = supplier.get();
		if (consumer == null) {
			throw new ContractException(ReportError.NULL_CONSUMER);
		}
		return consumer;
	}

}
