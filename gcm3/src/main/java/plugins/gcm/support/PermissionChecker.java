package plugins.gcm.support;

import java.util.ArrayList;
import java.util.List;

import nucleus.ResolverContext;
import plugins.components.datacontainers.ComponentDataView;
import plugins.components.support.ComponentId;

public final class PermissionChecker {
	private boolean permitResolverGeneratedEvents;
	private ResolverContext resolverContext;
	private List<ComponentId> componentIds;
	private List<Class<? extends ComponentId>> componentClasses;
	private ComponentDataView componentDataView;

	public static PermissionChecker newChecker(ResolverContext resolverContext, ComponentDataView componentDataView) {
		return new PermissionChecker(resolverContext, componentDataView);
	}

	private PermissionChecker(ResolverContext resolverContext, ComponentDataView componentDataView) {
		this.resolverContext = resolverContext;
		this.componentDataView = componentDataView;
		// resolverContext.getDataView(ComponentDataView.class).get();
	}

	public PermissionChecker permitResolverGeneratedEvents() {
		permitResolverGeneratedEvents = true;
		return this;
	}

	public PermissionChecker addPermissionByType(Class<? extends ComponentId> componentClass) {
		if (componentClass != null) {
			if (componentClasses == null) {
				componentClasses = new ArrayList<>();
			}
			componentClasses.add(componentClass);
		}
		return this;
	}

	public PermissionChecker addPermissionById(ComponentId componentId) {
		if (componentId != null) {
			if (componentIds == null) {
				componentIds = new ArrayList<>();
			}
			componentIds.add(componentId);
		}
		return this;
	}

	public void check() {
		if (!resolverContext.currentAgentIsEventSource()) {
			// the event was generated by another resolver
			if (permitResolverGeneratedEvents) {
				return;
			} else {
				resolverContext.throwContractException(GcmError.COMPONENT_LACKS_PERMISSION);
			}
		} else {
			// the event was generated by an agent
			ComponentId focalComponentId = componentDataView.getFocalComponentId();
			if (componentIds != null) {
				for (ComponentId componentId : componentIds) {
					if (componentId.equals(focalComponentId)) {
						return;
					}
				}
			}

			if (componentClasses != null) {
				for (Class<? extends ComponentId> componentClass : componentClasses) {
					if (componentClass.isAssignableFrom(focalComponentId.getClass())) {
						return;
					}
				}
			}
			resolverContext.throwContractException(GcmError.COMPONENT_LACKS_PERMISSION);
		}

	}

}
