package plugins.gcm;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.math3.random.RandomGenerator;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Test;

import plugins.compartments.support.CompartmentId;
import plugins.compartments.support.CompartmentPropertyId;
import plugins.compartments.testsupport.TestCompartmentId;
import plugins.gcm.AT_GCMPlugin_SetScenario.EmptyComponent;
import plugins.gcm.agents.AbstractComponent;
import plugins.gcm.experiment.Experiment;
import plugins.gcm.experiment.ExperimentBuilder;
import plugins.gcm.experiment.ScenarioId;
import plugins.gcm.input.Scenario;
import plugins.gcm.input.ScenarioErrorType;
import plugins.gcm.input.ScenarioException;
import plugins.globals.support.GlobalComponentId;
import plugins.globals.support.GlobalPropertyId;
import plugins.globals.testsupport.TestGlobalComponentId;
import plugins.globals.testsupport.TestGlobalPropertyId;
import plugins.groups.support.GroupId;
import plugins.groups.support.GroupPropertyId;
import plugins.groups.support.GroupTypeId;
import plugins.groups.testsupport.XTestGroupTypeId;
import plugins.materials.support.BatchId;
import plugins.materials.support.BatchPropertyId;
import plugins.materials.support.MaterialId;
import plugins.materials.support.MaterialsProducerId;
import plugins.materials.support.MaterialsProducerPropertyId;
import plugins.materials.support.StageId;
import plugins.people.support.PersonId;
import plugins.personproperties.support.PersonPropertyId;
import plugins.personproperties.testsupport.TestPersonPropertyId;
import plugins.properties.support.PropertyDefinition;
import plugins.properties.support.TimeTrackingPolicy;
import plugins.regions.support.RegionId;
import plugins.regions.support.RegionPropertyId;
import plugins.regions.testsupport.TestRegionId;
import plugins.regions.testsupport.TestRegionPropertyId;
import plugins.resources.support.ResourceId;
import plugins.resources.support.ResourcePropertyId;
import plugins.stochastics.support.RandomNumberGeneratorId;
import plugins.stochastics.testsupport.TestRandomGeneratorId;
import plugins.support.XTestMaterialId;
import plugins.support.XTestMaterialsProducerId;
import plugins.support.XTestMaterialsProducerPropertyId;
import plugins.support.XTestResourceId;
import plugins.support.experimentspace.ExperimentTestDimension.ExperimentTestDimensionBuilder;
import plugins.support.experimentspace.ExperimentTestSpace;
import plugins.support.experimentspace.ExperimentTestSpace.ExperimentTestSpaceBuilder;
import plugins.support.experimentspace.ExperimentTestVariable.ExperimentTestVariableBuilder;
import util.SeedProvider;
import util.annotations.UnitTest;
import util.annotations.UnitTestConstructor;
import util.annotations.UnitTestMethod;

/**
 * Test class for {@link ExperimentBuilder}
 * 
 * 
 * @author Shawn Hatch
 *
 */
@UnitTest(target = ExperimentBuilder.class)
public class AT_ExperimentBuilder {

	/*
	 * A placeholder implementation to satisfy scenario construction
	 */
	private static class PlaceholderComponent extends AbstractComponent {

	}

	private static SeedProvider SEED_PROVIDER = new SeedProvider(3664523477344523234L);

	/**
	 * Internal test(not part of public tests) to show that there are no large
	 * gaps in the seed cases generated by the SeedProvider.
	 */
	@AfterAll
	public static void afterClass() {
		// System.out.println(AT_ExperimentBuilder.class.getSimpleName() + " " +
		// SEED_PROVIDER.generateUnusedSeedReport());
	}

	private static final int TEST_DIMENSION_VALUE_COUNT = 10;

	/*
	 * Creates a RandomGenerator from the provided seed case number. Seed cases
	 * cannot be reused. This is intended to allow each test method to have a
	 * repeatable stochastic state without regard to Junit's execution order.
	 */
	private static void refreshRandomGenerator(int seedCase) {
		RANDOM_GENERATOR = SeedProvider.getRandomGenerator(SEED_PROVIDER.getSeedValue(seedCase));
	}

	/*
	 * It is sometimes desirable to force the seed value onto the Random
	 * Generator so stochastic data structures may be duplicated.
	 */
	private static void revertRandomGenerator(long seed) {
		RANDOM_GENERATOR = SeedProvider.getRandomGenerator(seed);
	}

	private static RandomGenerator RANDOM_GENERATOR;

	/*
	 * Adds property definitions for global properties 1 and 2 and sets some
	 * variant values for both. This will force the scenario factory to create
	 * multiple scenarios. This should only be used when the test is independent
	 * of global property values.
	 */
	private void fillWithVariantGlobalProperties(ExperimentBuilder experimentBuilder) {
		PropertyDefinition propertyDefinition1 = PropertyDefinition	.builder()//
																	.setType(String.class)//
																	.setDefaultValue("default")//
																	.build();

		PropertyDefinition propertyDefinition2 = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(7)//
																	.build();

		experimentBuilder.defineGlobalProperty(TestGlobalPropertyId.Global_Property_1, propertyDefinition1);
		experimentBuilder.defineGlobalProperty(TestGlobalPropertyId.Global_Property_2, propertyDefinition2);
		experimentBuilder.addGlobalPropertyValue(TestGlobalPropertyId.Global_Property_1, "alpha");
		experimentBuilder.addGlobalPropertyValue(TestGlobalPropertyId.Global_Property_1, "beta");
		experimentBuilder.addGlobalPropertyValue(TestGlobalPropertyId.Global_Property_2, 1);
		experimentBuilder.addGlobalPropertyValue(TestGlobalPropertyId.Global_Property_2, 2);
		experimentBuilder.addGlobalPropertyValue(TestGlobalPropertyId.Global_Property_2, 3);
	}

	/*
	 * Adds property definitions for Compartment properties 1 and 2 and sets
	 * some variant values for both. This will force the scenario factory to
	 * create multiple scenarios. This should only be used when the test is
	 * independent of compartments and compartment property values.
	 */
	private void fillWithVariantCompartmentProperties(ExperimentBuilder experimentBuilder) {
		PropertyDefinition propertyDefinition1 = PropertyDefinition	.builder()//
																	.setType(String.class)//
																	.setDefaultValue("default")//
																	.build();
		PropertyDefinition propertyDefinition2 = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(7)//
																	.build();
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_1;
		CompartmentPropertyId compartmentPropertyId1 = TestCompartmentId.COMPARTMENT_1.getCompartmentPropertyId(0);
		CompartmentPropertyId compartmentPropertyId2 = TestCompartmentId.COMPARTMENT_1.getCompartmentPropertyId(1);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId1, propertyDefinition1);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId2, propertyDefinition2);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId1, "alpha");
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId1, "beta");
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId2, 1);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId2, 2);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId2, 3);
	}

	/*
	 * See the co-method to this one that takes a Scenario Factory. This is
	 * doing essentially the same thing, but is filling an
	 * ExperimentSpaceBuilder instead. These two methods must deliver the same
	 * content.
	 */
	private void fillWithVariantGlobalProperties(ExperimentTestSpaceBuilder experimentTestSpaceBuilder) {
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();

		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getGlobalPropertyValue(TestGlobalPropertyId.Global_Property_1));
		experimentTestVariableBuilder.addValue("alpha");
		experimentTestVariableBuilder.addValue("beta");
		experimentTestSpaceBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getGlobalPropertyValue(TestGlobalPropertyId.Global_Property_2));
		experimentTestVariableBuilder.addValue(1);
		experimentTestVariableBuilder.addValue(2);
		experimentTestVariableBuilder.addValue(3);
		experimentTestSpaceBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

	}

	/*
	 * See the co-method to this one that takes a Scenario Factory. This is
	 * doing essentially the same thing, but is filling an
	 * ExperimentSpaceBuilder instead. These two methods must deliver the same
	 * content.
	 */
	private void fillWithVariantComparmentProperties(ExperimentTestSpaceBuilder experimentBuilder) {
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();

		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getCompartmentPropertyValue(TestCompartmentId.COMPARTMENT_1, TestCompartmentId.COMPARTMENT_1.getCompartmentPropertyId(0)));
		experimentTestVariableBuilder.addValue("alpha");
		experimentTestVariableBuilder.addValue("beta");
		experimentBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getCompartmentPropertyValue(TestCompartmentId.COMPARTMENT_1, TestCompartmentId.COMPARTMENT_1.getCompartmentPropertyId(1)));
		experimentTestVariableBuilder.addValue(1);
		experimentTestVariableBuilder.addValue(2);
		experimentTestVariableBuilder.addValue(3);
		experimentBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

	}

	private static List<Scenario> getScenarios(Experiment experiment) {
		List<Scenario> result = new ArrayList<>();
		for (int i = 0; i < experiment.getScenarioCount(); i++) {
			result.add(experiment.getScenario(i));
		}
		return result;
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addBatch(BatchId, MaterialId, double, MaterialsProducerId)}
	 */
	@Test
	@UnitTestMethod(name = "addBatch", args = { BatchId.class, MaterialId.class, double.class, MaterialsProducerId.class })
	public void testAddBatch() {
		refreshRandomGenerator(1);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		BatchId batchId = new BatchId(14);
		MaterialId materialId = XTestMaterialId.MATERIAL_1;
		double amount = 10;
		MaterialsProducerId materialsProducerId = XTestMaterialsProducerId.MATERIALS_PRODUCER_1;

		// precondition: if the batch id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatch(null, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_BATCH_ID, scenarioException.getScenarioErrorType());

		// precondition: if the material id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatch(batchId, null, amount, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_MATERIAL_ID, scenarioException.getScenarioErrorType());

		// precondition: if the material id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_MATERIAL_ID, scenarioException.getScenarioErrorType());

		// precondition: if the amount is negative
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addBatch(batchId, materialId, -1, materialsProducerId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NEGATIVE_MATERIAL_AMOUNT, scenarioException.getScenarioErrorType());

		// precondition: if the amount is negative
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addBatch(batchId, materialId, Double.NEGATIVE_INFINITY, materialsProducerId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NON_FINITE_MATERIAL_AMOUNT, scenarioException.getScenarioErrorType());

		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addBatch(batchId, materialId, Double.POSITIVE_INFINITY, materialsProducerId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NON_FINITE_MATERIAL_AMOUNT, scenarioException.getScenarioErrorType());

		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addBatch(batchId, materialId, Double.NaN, materialsProducerId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NON_FINITE_MATERIAL_AMOUNT, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addBatch(batchId, materialId, amount, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_MATERIALS_PRODUCER_ID, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_MATERIALS_PRODUCER_ID, scenarioException.getScenarioErrorType());

		// precondition: if the batch id was previously added
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);

		List<Scenario> scenarios = getScenarios(experimentBuilder.build());

		assertTrue(scenarios.size() > 0);
		// postcondition: all scenarios contain the batch
		for (Scenario scenario : scenarios) {
			// postcondition: the batch has the expected amount
			assertEquals(amount, scenario.getBatchAmount(batchId).doubleValue(), 0);
			// postcondition: the batch has the expected material type
			assertEquals(materialId, scenario.getBatchMaterial(batchId));
			// postcondition: the batch is owned by the expected materials
			// producer
			assertEquals(materialsProducerId, scenario.getBatchMaterialsProducer(batchId));
		}

	}

	/*
	 * Generate a random property definition that does not have Boolean as its
	 * type
	 */
	private PropertyDefinition generateRandomNonBooleanPropertyDefinition() {
		while (true) {
			PropertyDefinition result = generateRandomPropertyDefinition();
			if (!result.getType().equals(Boolean.class)) {
				return result;
			}
		}
	}

	/*
	 * Generate a random property definition
	 */
	private PropertyDefinition generateRandomPropertyDefinition() {
		Class<?> type;
		final int typeCase = RANDOM_GENERATOR.nextInt(5);
		Object defaultValue;
		switch (typeCase) {
		case 0:
			type = Boolean.class;
			defaultValue = RANDOM_GENERATOR.nextBoolean();
			break;
		case 1:
			type = Integer.class;
			defaultValue = RANDOM_GENERATOR.nextInt();
			break;
		case 2:
			type = String.class;
			defaultValue = "String " + RANDOM_GENERATOR.nextInt();
			break;
		case 3:
			type = Double.class;
			defaultValue = RANDOM_GENERATOR.nextDouble();
			break;
		default:
			type = Long.class;
			defaultValue = RANDOM_GENERATOR.nextLong();
			break;
		}
		boolean propertyValuesMayOverrideDefaultValue = RANDOM_GENERATOR.nextBoolean();
		TimeTrackingPolicy timeTrackingPolicy = TimeTrackingPolicy.values()[RANDOM_GENERATOR.nextInt(TimeTrackingPolicy.values().length)];

		final PropertyDefinition result = PropertyDefinition.builder()//
															.setType(type)//
															.setDefaultValue(defaultValue)//
															.setPropertyValueMutability(propertyValuesMayOverrideDefaultValue)//
															.setTimeTrackingPolicy(timeTrackingPolicy)//
															.build();
		return result;
	}

	/*
	 * Generates a property value that is consistent with the property
	 * definition but that is not equal to the definitions default value.
	 */
	private static Object generatePropertyValue(final PropertyDefinition propertyDefinition) {
		if (!propertyDefinition.getDefaultValue().isPresent()) {
			throw new RuntimeException("requires a property definition that has a non-null default value");
		}
		Object result = propertyDefinition.getDefaultValue().get();
		final Class<?> type = propertyDefinition.getType();

		while (result.equals(propertyDefinition.getDefaultValue().get())) {
			if (type == Boolean.class) {
				result = RANDOM_GENERATOR.nextBoolean();
			} else if (type == Integer.class) {
				result = RANDOM_GENERATOR.nextInt();
			} else if (type == String.class) {
				result = "String " + RANDOM_GENERATOR.nextInt();
			} else if (type == Long.class) {
				result = RANDOM_GENERATOR.nextLong();
			} else if (type == Double.class) {
				result = RANDOM_GENERATOR.nextDouble();
			} else {
				throw new RuntimeException("unknown type " + type);
			}
		}
		return result;
	}

	/*
	 * Generates a set of count property values consistent with the property
	 * definition but not equal to the definition's default value.
	 */
	private static Set<Object> generatePropertyValues(final PropertyDefinition propertyDefinition, int count) {
		Set<Object> result = new LinkedHashSet<>();
		while (result.size() < count) {
			result.add(generatePropertyValue(propertyDefinition));

		}
		return result;
	}

	/*
	 * Generates a set of positive resource levels
	 */
	private static Set<Long> generateResourceLevels(int count) {
		Set<Long> result = new LinkedHashSet<>();
		while (result.size() < count) {
			long value = RANDOM_GENERATOR.nextInt(1000000) + 1;
			result.add(value);
		}
		return result;
	}

	/*
	 * Generates a property value that will have a inconsistent class type to
	 * the one contained in the given property definition.
	 */
	private static Object generateIncompatiblePropertyValue(final PropertyDefinition propertyDefinition) {

		final Class<?> type = propertyDefinition.getType();

		if (type == Boolean.class) {
			return RANDOM_GENERATOR.nextLong();
		} else if (type == Integer.class) {
			return RANDOM_GENERATOR.nextBoolean();

		} else if (type == String.class) {
			return RANDOM_GENERATOR.nextInt();

		} else if (type == Long.class) {
			return "String " + RANDOM_GENERATOR.nextInt();
		} else if (type == Double.class) {
			return "String " + RANDOM_GENERATOR.nextInt();
		} else {
			throw new RuntimeException("unknown type " + type);
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addBatchPropertyValue(BatchId, BatchPropertyId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "addBatchPropertyValue", args = { BatchId.class, BatchPropertyId.class, Object.class })
	public void testAddBatchPropertyValue() {
		refreshRandomGenerator(0);

		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		BatchId batchId = new BatchId(645778);
		BatchPropertyId batchPropertyId = XTestMaterialId.MATERIAL_3.getBatchPropertyIds()[0];
		PropertyDefinition propertyDefinition = generateRandomPropertyDefinition();
		Object propertyValue = generatePropertyValue(propertyDefinition);
		Object incompatiblePropertyValue = generateIncompatiblePropertyValue(propertyDefinition);
		MaterialId materialId = XTestMaterialId.MATERIAL_3;
		double amount = 2341456;
		MaterialsProducerId materialsProducerId = XTestMaterialsProducerId.MATERIALS_PRODUCER_1;

		// precondition: if the batch id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatchPropertyValue(null, batchPropertyId, propertyValue);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_BATCH_ID, scenarioException.getScenarioErrorType());

		// precondition: if the batch id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatchPropertyValue(new BatchId(234), batchPropertyId, propertyValue);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_BATCH_ID, scenarioException.getScenarioErrorType());

		// precondition: if the batch property id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatchPropertyValue(batchId, null, propertyValue);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_BATCH_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the batch property id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatchPropertyValue(batchId, XTestMaterialId.getUnknownBatchPropertyId(), propertyValue);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_BATCH_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the value is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, null);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_BATCH_PROPERTY_VALUE, scenarioException.getScenarioErrorType());

		// precondition: if the value is not compatible with the property
		// definition
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, incompatiblePropertyValue);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.INCOMPATIBLE_VALUE, scenarioException.getScenarioErrorType());

		// precondition: if the batch property value was added multiple times
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, propertyValue);
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, propertyValue);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_DIMENSION_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: the experiment space is well formed
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.addMaterial(materialId);

		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		Set<Object> batchPropertyValues = generatePropertyValues(propertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		for (Object batchPropertyValue : batchPropertyValues) {
			experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, batchPropertyValue);
			experimentTestVariableBuilder.addValue(batchPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getBatchPropertyValue(batchId, batchPropertyId));
		experimentTestSpaceBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		experimentTestSpace.assertEqualSpaces(getScenarios(experimentBuilder.build()));

	}

	/**
	 * Tests {@link ExperimentBuilder#addBatchToStage(StageId, BatchId)}
	 */
	@Test
	@UnitTestMethod(name = "addBatchToStage", args = { StageId.class, BatchId.class })
	public void testAddBatchToStage() {
		refreshRandomGenerator(2);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		StageId stageId = new StageId(37);
		BatchId batchId = new BatchId(15);
		MaterialId materialId = XTestMaterialId.MATERIAL_2;
		double amount = 13.5;
		MaterialsProducerId materialsProducerId = XTestMaterialsProducerId.MATERIALS_PRODUCER_3;

		// precondition: if the stage id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatchToStage(null, batchId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addStage(stageId, false, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_STAGE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the stage id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatchToStage(stageId, batchId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_STAGE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the batch id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatchToStage(stageId, null);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addStage(stageId, false, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_BATCH_ID, scenarioException.getScenarioErrorType());

		// precondition: if the batch id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatchToStage(stageId, batchId);
		experimentBuilder.addStage(stageId, false, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_BATCH_ID, scenarioException.getScenarioErrorType());

		// precondition: if the stage and batch are not associated with the same
		// materials producer
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatchToStage(stageId, batchId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addStage(stageId, false, XTestMaterialsProducerId.MATERIALS_PRODUCER_2);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addMaterialsProducerId(XTestMaterialsProducerId.MATERIALS_PRODUCER_2, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.BATCH_STAGED_TO_DIFFERENT_OWNER, scenarioException.getScenarioErrorType());

		// precondition: if the batch is already associated any stage
		fillWithVariantGlobalProperties(experimentBuilder);
		StageId alternateStageId = new StageId(319);
		experimentBuilder.addBatchToStage(alternateStageId, batchId);
		experimentBuilder.addBatchToStage(stageId, batchId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addStage(stageId, false, materialsProducerId);
		experimentBuilder.addStage(alternateStageId, false, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.BATCH_ALREADY_STAGED, scenarioException.getScenarioErrorType());

		// postcondition: all scenarios have the batch staged
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatchToStage(stageId, batchId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addStage(stageId, false, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());
		assertTrue(scenarios.size() > 0);
		for (Scenario scenario : scenarios) {
			Set<BatchId> stageBatches = scenario.getStageBatches(stageId);

			// postcondition: the stage is associated with only the batches
			// added
			assertEquals(1, stageBatches.size());

			// postcondition: the stage is associated with the batch
			assertTrue(stageBatches.contains(batchId));
		}
	}

	/**
	 * Tests {@link ExperimentBuilder#addCompartmentId(CompartmentId, Class)}
	 */
	@Test
	@UnitTestMethod(name = "addCompartmentId", args = { CompartmentId.class, Class.class })
	public void testAddCompartmentId() {
		refreshRandomGenerator(3);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_1;

		// precondition: if the compartment id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(null, () -> new PlaceholderComponent()::init);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_COMPONENT_IDENTIFIER, scenarioException.getScenarioErrorType());

		// precondition: if the compartment component class is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_AGENT_INITIAL_BEHAVIOR_SUPPLIER, scenarioException.getScenarioErrorType());

		// precondition: if the compartment id is equal to another previously
		// added component id
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ADDED_IDENTIFIER, scenarioException.getScenarioErrorType());

		// postcondition: all scenarios contain the compartment and component
		// class
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());
		assertTrue(scenarios.size() > 0);
		for (Scenario scenario : scenarios) {
			// postcondition: the scenario should contain the compartment
			assertTrue(scenario.getCompartmentIds().contains(compartmentId));
			assertNotNull(scenario.getCompartmentInitialBehaviorSupplier(compartmentId));
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addCompartmentPropertyValue(CompartmentId, CompartmentPropertyId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "addCompartmentPropertyValue", args = { CompartmentId.class, CompartmentPropertyId.class, Object.class })
	public void testAddCompartmentPropertyValue() {
		refreshRandomGenerator(4);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_1;
		CompartmentPropertyId compartmentPropertyId = TestCompartmentId.COMPARTMENT_1.getCompartmentPropertyId(0);
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(15)//
																	.build();
		Object propertyValue = 77;

		// precondition: if the compartment property id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, null, propertyValue);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, propertyDefinition);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_COMPARTMENT_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the compartment property id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, TestCompartmentId.getUnknownCompartmentPropertyId(), propertyValue);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_COMPARTMENT_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the compartment id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentPropertyValue(null, compartmentPropertyId, propertyValue);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_COMPARTMENT_ID, scenarioException.getScenarioErrorType());

		// precondition: if the compartment id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentPropertyValue(TestCompartmentId.getUnknownCompartmentId(), compartmentPropertyId, propertyValue);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_COMPARTMENT_ID, scenarioException.getScenarioErrorType());

		// precondition: if the value is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, null);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_COMPARTMENT_PROPERTY_VALUE, scenarioException.getScenarioErrorType());

		// precondition: if the value is not compatible with the property
		// definition
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, "incompatible value");
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.INCOMPATIBLE_VALUE, scenarioException.getScenarioErrorType());

		// precondition: if the compartment property value was previously set
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, propertyValue);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, propertyValue);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_DIMENSION_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: the compartment has the expected property value

		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, propertyDefinition);

		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		Set<Object> compartmentPropertyValues = generatePropertyValues(propertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		for (Object compartmentPropertyValue : compartmentPropertyValues) {
			experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, compartmentPropertyValue);
			experimentTestVariableBuilder.addValue(compartmentPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getCompartmentPropertyValue(compartmentId, compartmentPropertyId));
		experimentTestSpaceBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		experimentTestSpace.assertEqualSpaces(getScenarios(experimentBuilder.build()));

	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addGlobalComponentId(GlobalComponentId, Class)}
	 */
	@Test
	@UnitTestMethod(name = "addGlobalComponentId", args = { GlobalComponentId.class, Class.class })
	public void testAddGlobalComponentId() {
		refreshRandomGenerator(5);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		GlobalComponentId globalComponentId = TestGlobalComponentId.GLOBAL_COMPONENT_1;

		// precondition: if the global component id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGlobalComponentId(null, () -> new PlaceholderComponent()::init);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_COMPONENT_IDENTIFIER, scenarioException.getScenarioErrorType());

		// precondition: if the global component class is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGlobalComponentId(globalComponentId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_AGENT_INITIAL_BEHAVIOR_SUPPLIER, scenarioException.getScenarioErrorType());

		// precondition: if the global component id is equal to another
		// previously added component id
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGlobalComponentId(globalComponentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addGlobalComponentId(globalComponentId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ADDED_IDENTIFIER, scenarioException.getScenarioErrorType());

		// postcondition: all scenarios contain the global component id
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGlobalComponentId(globalComponentId, () -> new PlaceholderComponent()::init);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());
		assertTrue(scenarios.size() > 0);
		for (Scenario scenario : scenarios) {
			assertTrue(scenario.getGlobalComponentIds().contains(globalComponentId));
			assertNotNull(scenario.getGlobalInitialBehaviorSupplier(globalComponentId));
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addGlobalPropertyValue(GlobalPropertyId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "addGlobalPropertyValue", args = { GlobalPropertyId.class, Object.class })
	public void testAddGlobalPropertyValue() {
		refreshRandomGenerator(13);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		GlobalPropertyId globalPropertyId = TestGlobalPropertyId.Global_Property_1;
		Object propertyValue = "value";
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(String.class)//
																	.setDefaultValue("default")//
																	.build();

		// precondition: if the global property id is null
		fillWithVariantCompartmentProperties(experimentBuilder);
		experimentBuilder.addGlobalPropertyValue(null, propertyValue);
		experimentBuilder.defineGlobalProperty(globalPropertyId, propertyDefinition);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GLOBAL_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the global property id is unknown
		fillWithVariantCompartmentProperties(experimentBuilder);
		experimentBuilder.addGlobalPropertyValue(TestGlobalPropertyId.getUnknownGlobalPropertyId(), propertyValue);
		experimentBuilder.defineGlobalProperty(globalPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_GLOBAL_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the value is null
		fillWithVariantCompartmentProperties(experimentBuilder);
		experimentBuilder.addGlobalPropertyValue(globalPropertyId, null);
		experimentBuilder.defineGlobalProperty(globalPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GLOBAL_PROPERTY_VALUE, scenarioException.getScenarioErrorType());

		// precondition: if the value is not compatible with the property
		// definition
		fillWithVariantCompartmentProperties(experimentBuilder);
		experimentBuilder.addGlobalPropertyValue(globalPropertyId, 67);
		experimentBuilder.defineGlobalProperty(globalPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.INCOMPATIBLE_VALUE, scenarioException.getScenarioErrorType());

		// precondition: if the global property value was previously set
		fillWithVariantCompartmentProperties(experimentBuilder);
		experimentBuilder.addGlobalPropertyValue(globalPropertyId, propertyValue);
		experimentBuilder.addGlobalPropertyValue(globalPropertyId, propertyValue);
		experimentBuilder.defineGlobalProperty(globalPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_DIMENSION_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: the global property has the expected value

		fillWithVariantCompartmentProperties(experimentBuilder);
		experimentBuilder.defineGlobalProperty(globalPropertyId, propertyDefinition);

		// postcondition: the experiment space is well formed
		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantComparmentProperties(experimentTestSpaceBuilder);
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		Set<Object> globalPropertyValues = generatePropertyValues(propertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		for (Object globalPropertyValue : globalPropertyValues) {
			experimentBuilder.addGlobalPropertyValue(globalPropertyId, globalPropertyValue);
			experimentTestVariableBuilder.addValue(globalPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getGlobalPropertyValue(globalPropertyId));
		experimentTestSpaceBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		experimentTestSpace.assertEqualSpaces(getScenarios(experimentBuilder.build()));
	}

	/**
	 * Tests {@link ExperimentBuilder#addGroup(GroupId, GroupTypeId)}
	 */
	@Test
	@UnitTestMethod(name = "addGroup", args = { GroupId.class, GroupTypeId.class })
	public void testAddGroup() {
		refreshRandomGenerator(6);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		GroupId groupId = new GroupId(15);
		GroupTypeId groupTypeId = XTestGroupTypeId.GROUP_TYPE_1;

		// precondition : if the group id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroup(null, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GROUP_ID, scenarioException.getScenarioErrorType());

		// precondition : if the group type id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroup(groupId, null);
		experimentBuilder.addGroupTypeId(groupTypeId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GROUP_TYPE_ID, scenarioException.getScenarioErrorType());

		// precondition : if the group type id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroup(groupId, groupTypeId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_GROUP_TYPE_ID, scenarioException.getScenarioErrorType());

		// precondition : if the group was previously added
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: all scenarios contain the group
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());
		assertTrue(scenarios.size() > 0);
		for (Scenario scenario : scenarios) {
			// post condition: the scenario contains the group
			scenario.getGroupIds().contains(groupId);
			// post condition: the group has the expected group type
			assertEquals(groupTypeId, scenario.getGroupTypeId(groupId));
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addGroupPropertyValue(GroupId, GroupPropertyId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "addGroupPropertyValue", args = { GroupId.class, GroupPropertyId.class, Object.class })
	public void testAddGroupPropertyValue() {
		refreshRandomGenerator(14);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		GroupId groupId = new GroupId(64);
		GroupPropertyId groupPropertyId = XTestGroupTypeId.GROUP_TYPE_5.getGroupPropertyIds()[0];
		Object propertyValue = 78;
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(45)//
																	.build();//
		GroupTypeId groupTypeId = XTestGroupTypeId.GROUP_TYPE_1;

		// precondition: if the group id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroupPropertyValue(null, groupPropertyId, propertyValue);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, propertyDefinition);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GROUP_ID, scenarioException.getScenarioErrorType());

		// precondition: if the group id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroupPropertyValue(new GroupId(345), groupPropertyId, propertyValue);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, propertyDefinition);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_GROUP_ID, scenarioException.getScenarioErrorType());

		// precondition: if the group property is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroupPropertyValue(groupId, null, propertyValue);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, propertyDefinition);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GROUP_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the group property is unknown
		experimentBuilder.addGroupPropertyValue(groupId, XTestGroupTypeId.getUnknownGroupPropertyId(), propertyValue);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, propertyDefinition);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_GROUP_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the value is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, null);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, propertyDefinition);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GROUP_PROPERTY_VALUE, scenarioException.getScenarioErrorType());

		// precondition: if the value is not compatible with the property
		// definition
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, "incompatible value");
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, propertyDefinition);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.INCOMPATIBLE_VALUE, scenarioException.getScenarioErrorType());

		// precondition: if the group property value was previously set
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, propertyValue);
		experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, propertyValue);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, propertyDefinition);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_DIMENSION_VALUE, scenarioException.getScenarioErrorType());

		// postcondition tests
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, propertyDefinition);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);

		// postcondition: the experiment space is well formed
		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		Set<Object> groupPropertyValues = generatePropertyValues(propertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		for (Object groupPropertyValue : groupPropertyValues) {
			experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, groupPropertyValue);
			experimentTestVariableBuilder.addValue(groupPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getGroupPropertyValue(groupId, groupPropertyId));
		experimentTestSpaceBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		experimentTestSpace.assertEqualSpaces(getScenarios(experimentBuilder.build()));

	}

	/**
	 * Tests {@link ExperimentBuilder#addGroupTypeId(GroupTypeId)}
	 */
	@Test
	@UnitTestMethod(name = "addGroupTypeId", args = { GroupTypeId.class })
	public void testAddGroupTypeId() {
		refreshRandomGenerator(7);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		GroupTypeId groupTypeId = XTestGroupTypeId.GROUP_TYPE_1;

		// precondition: if the group type id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroupTypeId(null);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GROUP_TYPE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the group type was previously added
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroupTypeId(groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: all scenarios contain the group type id
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroupTypeId(groupTypeId);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());
		assertTrue(scenarios.size() > 0);
		for (Scenario scenario : scenarios) {
			// postcondition: the scenario contains the group type id
			assertTrue(scenario.getGroupTypeIds().contains(groupTypeId));
		}
	}

	/**
	 * Tests {@link ExperimentBuilder#addMaterial(MaterialId)}
	 */
	@Test
	@UnitTestMethod(name = "addMaterial", args = { MaterialId.class })
	public void testAddMaterial() {
		refreshRandomGenerator(8);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		MaterialId materialId = XTestMaterialId.MATERIAL_1;

		// precondition: if the material id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterial(null);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_MATERIAL_ID, scenarioException.getScenarioErrorType());

		// precondition: if the material was previously added
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterial(materialId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		// postcondition : all scenarios contain the material id
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterial(materialId);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());
		assertTrue(scenarios.size() > 0);
		for (Scenario scenario : scenarios) {
			assertTrue(scenario.getMaterialIds().contains(materialId));
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addMaterialsProducerId(MaterialsProducerId, Class)}
	 */
	@Test
	@UnitTestMethod(name = "addMaterialsProducerId", args = { MaterialsProducerId.class, Class.class })
	public void testAddMaterialsProducerId() {
		refreshRandomGenerator(9);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		MaterialsProducerId materialsProducerId = XTestMaterialsProducerId.MATERIALS_PRODUCER_1;

		// precondition: if the materials producer id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerId(null, () -> new PlaceholderComponent()::init);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_COMPONENT_IDENTIFIER, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer component class is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_AGENT_INITIAL_BEHAVIOR_SUPPLIER, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer id is equal to another
		// previously added component id
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ADDED_IDENTIFIER, scenarioException.getScenarioErrorType());

		// postcondition: all scenarios contain the materials producer id
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());
		assertTrue(scenarios.size() > 0);
		for (Scenario scenario : scenarios) {
			assertTrue(scenario.getMaterialsProducerIds().contains(materialsProducerId));
			assertNotNull(scenario.getMaterialsProducerInitialBehaviorSupplier(materialsProducerId));
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addMaterialsProducerPropertyValue(MaterialsProducerId, MaterialsProducerPropertyId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "addMaterialsProducerPropertyValue", args = { MaterialsProducerId.class, MaterialsProducerPropertyId.class, Object.class })
	public void testAddMaterialsProducerPropertyValue() {
		refreshRandomGenerator(10);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		MaterialsProducerId materialsProducerId = XTestMaterialsProducerId.MATERIALS_PRODUCER_1;
		MaterialsProducerPropertyId materialsProducerPropertyId = XTestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1;
		Object propertyValue = 45;
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(634)//
																	.build();

		// precondition: if the materials producer property id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, null, propertyValue);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, propertyDefinition);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_MATERIALS_PRODUCER_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer property id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, XTestMaterialsProducerPropertyId.getUnknownMaterialsProducerPropertyId(), propertyValue);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, propertyDefinition);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_MATERIALS_PRODUCER_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerPropertyValue(null, materialsProducerPropertyId, propertyValue);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, propertyDefinition);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_MATERIALS_PRODUCER_ID, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, propertyValue);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_MATERIALS_PRODUCER_ID, scenarioException.getScenarioErrorType());

		// precondition: if the value is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, null);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, propertyDefinition);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_MATERIALS_PRODUCER_PROPERTY_VALUE, scenarioException.getScenarioErrorType());

		// precondition: if the value is not compatible with the property
		// definition
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, "incompatible value");
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, propertyDefinition);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.INCOMPATIBLE_VALUE, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer property value was previously
		// set
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, propertyValue);
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, propertyValue);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, propertyDefinition);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_DIMENSION_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: the experiment space is well formed
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, propertyDefinition);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);

		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		Set<Object> materialsProducerPropertyValues = generatePropertyValues(propertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		for (Object materialsProducerPropertyValue : materialsProducerPropertyValues) {
			experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, materialsProducerPropertyValue);
			experimentTestVariableBuilder.addValue(materialsProducerPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId));
		experimentTestSpaceBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		experimentTestSpace.assertEqualSpaces(getScenarios(experimentBuilder.build()));
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addMaterialsProducerResourceLevel(MaterialsProducerId, ResourceId, long)}
	 */
	@Test
	@UnitTestMethod(name = "addMaterialsProducerResourceLevel", args = { MaterialsProducerId.class, ResourceId.class, long.class })
	public void testAddMaterialsProducerResourceLevel() {
		refreshRandomGenerator(11);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		MaterialsProducerId materialsProducerId = XTestMaterialsProducerId.MATERIALS_PRODUCER_1;
		ResourceId resourceId = XTestResourceId.RESOURCE3;
		long amount = 234;

		// precondition: if the materials producer id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerResourceLevel(null, resourceId, amount);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_MATERIALS_PRODUCER_ID, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerResourceLevel(XTestMaterialsProducerId.getUnknownMaterialsProducerId(), resourceId, amount);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_MATERIALS_PRODUCER_ID, scenarioException.getScenarioErrorType());

		// precondition: if the resource id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, null, amount);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the resource id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, XTestResourceId.getUnknownResourceId(), amount);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_RESOURCE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the amount is negative
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, resourceId, -234L);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NEGATIVE_RESOURCE_AMOUNT, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer resource level was previously
		// set
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, resourceId, amount);
		experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, resourceId, amount);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_DIMENSION_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: the experiment space is well formed
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);

		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		Set<Long> materialsProducerResouceLevels = generateResourceLevels(TEST_DIMENSION_VALUE_COUNT);
		for (Long materialsProducerResouceLevel : materialsProducerResouceLevels) {
			experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, resourceId, materialsProducerResouceLevel);
			experimentTestVariableBuilder.addValue(materialsProducerResouceLevel);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getMaterialsProducerResourceLevel(materialsProducerId, resourceId));
		experimentTestSpaceBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		experimentTestSpace.assertEqualSpaces(getScenarios(experimentBuilder.build()));

	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addPerson(PersonId, RegionId, CompartmentId)}
	 */
	@Test
	@UnitTestMethod(name = "addPerson", args = { PersonId.class, RegionId.class, CompartmentId.class })
	public void testAddPerson() {
		refreshRandomGenerator(12);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		PersonId personId = new PersonId(56);
		RegionId regionId = TestRegionId.REGION_1;
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_1;

		// precondition: if the person id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(null, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_PERSON_ID, scenarioException.getScenarioErrorType());

		// precondition: if the region id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, null, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_REGION_ID, scenarioException.getScenarioErrorType());

		// precondition: if the region id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_REGION_ID, scenarioException.getScenarioErrorType());

		// precondition: if the compartment id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, regionId, null);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_COMPARTMENT_ID, scenarioException.getScenarioErrorType());

		// precondition: if the compartment id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_COMPARTMENT_ID, scenarioException.getScenarioErrorType());

		// precondition: if the person was previously added
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		// postcondition:
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());
		assertTrue(scenarios.size() > 0);
		for (Scenario scenario : scenarios) {
			// postcondition: the scenario contains the person
			assertTrue(scenario.getPeopleIds().contains(personId));
			// postcondition: the person has the expected compartment
			assertEquals(compartmentId, scenario.getPersonCompartment(personId));
			// postcondition: the person has the expected region
			assertEquals(regionId, scenario.getPersonRegion(personId));
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addPersonPropertyValue(PersonId, PersonPropertyId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "addPersonPropertyValue", args = { PersonId.class, PersonPropertyId.class, Object.class })
	public void testAddPersonPropertyValue() {
		refreshRandomGenerator(15);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		PersonId personId = new PersonId(68);
		PersonPropertyId personPropertyId = TestPersonPropertyId.PERSON_PROPERTY_1_BOOLEAN_MUTABLE_NO_TRACK;
		Object propertyValue = 38;
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(12)//
																	.build();//
		RegionId regionId = TestRegionId.REGION_5;
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_3;

		// precondition: if the person id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonPropertyValue(null, personPropertyId, propertyValue);
		experimentBuilder.definePersonProperty(personPropertyId, propertyDefinition);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_PERSON_ID, scenarioException.getScenarioErrorType());

		// precondition: if the person id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonPropertyValue(new PersonId(444), personPropertyId, propertyValue);
		experimentBuilder.definePersonProperty(personPropertyId, propertyDefinition);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_PERSON_ID, scenarioException.getScenarioErrorType());

		// precondition: if the person property id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonPropertyValue(personId, null, propertyValue);
		experimentBuilder.definePersonProperty(personPropertyId, propertyDefinition);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_PERSON_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the person property id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonPropertyValue(personId, TestPersonPropertyId.getUnknownPersonPropertyId(), propertyValue);
		experimentBuilder.definePersonProperty(personPropertyId, propertyDefinition);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_PERSON_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the value is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonPropertyValue(personId, personPropertyId, null);
		experimentBuilder.definePersonProperty(personPropertyId, propertyDefinition);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_PERSON_PROPERTY_VALUE, scenarioException.getScenarioErrorType());

		// precondition: if the value is not compatible with the property
		// definition
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonPropertyValue(personId, personPropertyId, "incompatible value");
		experimentBuilder.definePersonProperty(personPropertyId, propertyDefinition);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.INCOMPATIBLE_VALUE, scenarioException.getScenarioErrorType());

		// precondition: if the person property value was previously set
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonPropertyValue(personId, personPropertyId, propertyValue);
		experimentBuilder.addPersonPropertyValue(personId, personPropertyId, propertyValue);
		experimentBuilder.definePersonProperty(personPropertyId, propertyDefinition);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_DIMENSION_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: the experiment space is well formed
		fillWithVariantGlobalProperties(experimentBuilder);

		experimentBuilder.definePersonProperty(personPropertyId, propertyDefinition);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);

		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		Set<Object> personPropertyValues = generatePropertyValues(propertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		for (Object personPropertyValue : personPropertyValues) {
			experimentBuilder.addPersonPropertyValue(personId, personPropertyId, personPropertyValue);
			experimentTestVariableBuilder.addValue(personPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getPersonPropertyValue(personId, personPropertyId));
		experimentTestSpaceBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		experimentTestSpace.assertEqualSpaces(getScenarios(experimentBuilder.build()));

	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addPersonResourceLevel(PersonId, ResourceId, long)}
	 */
	@Test
	@UnitTestMethod(name = "addPersonResourceLevel", args = { PersonId.class, ResourceId.class, long.class })
	public void testAddPersonResourceLevel() {
		refreshRandomGenerator(16);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		PersonId personId = new PersonId(76);
		ResourceId resourceId = XTestResourceId.RESOURCE2;
		long amount = 3453L;
		RegionId regionId = TestRegionId.REGION_4;
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_2;

		// precondition: if the person id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonResourceLevel(null, resourceId, amount);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_PERSON_ID, scenarioException.getScenarioErrorType());

		// precondition: if the person id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonResourceLevel(new PersonId(88), resourceId, amount);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_PERSON_ID, scenarioException.getScenarioErrorType());

		// precondition: if the resource id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonResourceLevel(personId, null, amount);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the resource id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonResourceLevel(personId, XTestResourceId.getUnknownResourceId(), amount);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_RESOURCE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the amount is negative
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonResourceLevel(personId, resourceId, -321L);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NEGATIVE_RESOURCE_AMOUNT, scenarioException.getScenarioErrorType());

		// precondition: if the person resource level was previously set
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonResourceLevel(personId, resourceId, amount);
		experimentBuilder.addPersonResourceLevel(personId, resourceId, amount);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_DIMENSION_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: the experiment space is well formed
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);

		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		Set<Long> personResourceLevels = generateResourceLevels(TEST_DIMENSION_VALUE_COUNT);
		for (Long personResourceLevel : personResourceLevels) {
			experimentBuilder.addPersonResourceLevel(personId, resourceId, personResourceLevel);
			experimentTestVariableBuilder.addValue(personResourceLevel);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getPersonResourceLevel(personId, resourceId));
		experimentTestSpaceBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		experimentTestSpace.assertEqualSpaces(getScenarios(experimentBuilder.build()));

	}

	/**
	 * Tests {@link ExperimentBuilder#addPersonToGroup(GroupId, PersonId)}
	 */
	@Test
	@UnitTestMethod(name = "addPersonToGroup", args = { GroupId.class, PersonId.class })
	public void testAddPersonToGroup() {
		refreshRandomGenerator(17);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		GroupId groupId = new GroupId(45);
		PersonId personId = new PersonId(37);
		GroupTypeId groupTypeId = XTestGroupTypeId.GROUP_TYPE_2;
		RegionId regionId = TestRegionId.REGION_5;
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_3;

		// precondition: if the person id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonToGroup(groupId, null);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_PERSON_ID, scenarioException.getScenarioErrorType());

		// precondition: if the person id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonToGroup(groupId, personId);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_PERSON_ID, scenarioException.getScenarioErrorType());

		// precondition: if the group id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonToGroup(null, personId);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GROUP_ID, scenarioException.getScenarioErrorType());

		// precondition: if the group id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonToGroup(groupId, personId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_GROUP_ID, scenarioException.getScenarioErrorType());

		// precondition: if the person was previously added to the group
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonToGroup(groupId, personId);
		experimentBuilder.addPersonToGroup(groupId, personId);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: the person is in the group in all scenarios
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPersonToGroup(groupId, personId);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());
		assertTrue(scenarios.size() > 0);
		for (Scenario scenario : scenarios) {
			assertTrue(scenario.getGroupMembers(groupId).contains(personId));
		}
	}

	/**
	 * Tests {@link ExperimentBuilder#addRegionId(RegionId, Class)}
	 */
	@Test
	@UnitTestMethod(name = "addRegionId", args = { RegionId.class, Class.class })
	public void testAddRegionId() {
		refreshRandomGenerator(18);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		RegionId regionId = TestRegionId.REGION_4;

		// precondition: if the region id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(null, () -> new PlaceholderComponent()::init);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_COMPONENT_IDENTIFIER, scenarioException.getScenarioErrorType());

		// precondition: if the region component class is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_AGENT_INITIAL_BEHAVIOR_SUPPLIER, scenarioException.getScenarioErrorType());

		// precondition: if the region was previously added
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ADDED_IDENTIFIER, scenarioException.getScenarioErrorType());

		// postcondition: all scenarios contain the region and region component
		// class
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());
		assertTrue(scenarios.size() > 0);
		for (Scenario scenario : scenarios) {
			assertTrue(scenario.getRegionIds().contains(regionId));
			assertNotNull(scenario.getRegionInitialBehaviorSupplier(regionId));
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addRegionPropertyValue(RegionId, RegionPropertyId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "addRegionPropertyValue", args = { RegionId.class, RegionPropertyId.class, Object.class })
	public void testAddRegionPropertyValue() {
		refreshRandomGenerator(19);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		RegionId regionId = TestRegionId.REGION_3;
		RegionPropertyId regionPropertyId = TestRegionPropertyId.REGION_PROPERTY_7;
		Object propertyValue = 88;
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(789)//
																	.build();

		// precondition: if the region id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionPropertyValue(null, regionPropertyId, propertyValue);
		experimentBuilder.defineRegionProperty(regionPropertyId, propertyDefinition);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_REGION_ID, scenarioException.getScenarioErrorType());

		// precondition: if the region id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionPropertyValue(TestRegionId.getUnknownRegionId(), regionPropertyId, propertyValue);
		experimentBuilder.defineRegionProperty(regionPropertyId, propertyDefinition);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_REGION_ID, scenarioException.getScenarioErrorType());

		// precondition: if the region property id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionPropertyValue(regionId, null, propertyValue);
		experimentBuilder.defineRegionProperty(regionPropertyId, propertyDefinition);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_REGION_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the region property id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionPropertyValue(regionId, TestRegionPropertyId.getUnknownRegionPropertyId(), propertyValue);
		experimentBuilder.defineRegionProperty(regionPropertyId, propertyDefinition);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_REGION_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the value is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, null);
		experimentBuilder.defineRegionProperty(regionPropertyId, propertyDefinition);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_REGION_PROPERTY_VALUE, scenarioException.getScenarioErrorType());

		// precondition: if the value is not compatible with the property
		// definition
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, "incompatible value");
		experimentBuilder.defineRegionProperty(regionPropertyId, propertyDefinition);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.INCOMPATIBLE_VALUE, scenarioException.getScenarioErrorType());

		// precondition: if the region property value was previously set
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, propertyValue);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, propertyValue);
		experimentBuilder.defineRegionProperty(regionPropertyId, propertyDefinition);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_DIMENSION_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: the experiment space is well formed
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineRegionProperty(regionPropertyId, propertyDefinition);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);

		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		Set<Object> regionPropertyValues = generatePropertyValues(propertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		for (Object regionPropertyValue : regionPropertyValues) {
			experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, regionPropertyValue);
			experimentTestVariableBuilder.addValue(regionPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getRegionPropertyValue(regionId, regionPropertyId));
		experimentTestSpaceBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		experimentTestSpace.assertEqualSpaces(getScenarios(experimentBuilder.build()));

	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addRegionResourceLevel(RegionId, ResourceId, long)}
	 */
	@Test
	@UnitTestMethod(name = "addRegionResourceLevel", args = { RegionId.class, ResourceId.class, long.class })
	public void testAddRegionResourceLevel() {
		refreshRandomGenerator(20);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		RegionId regionId = TestRegionId.REGION_6;
		ResourceId resourceId = XTestResourceId.RESOURCE4;
		long amount = 345;

		// precondition: if the region id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionResourceLevel(null, resourceId, amount);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_REGION_ID, scenarioException.getScenarioErrorType());

		// precondition: if the region id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionResourceLevel(TestRegionId.getUnknownRegionId(), resourceId, amount);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_REGION_ID, scenarioException.getScenarioErrorType());

		// precondition: if the resource id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionResourceLevel(regionId, null, amount);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the resource id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionResourceLevel(regionId, XTestResourceId.getUnknownResourceId(), amount);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_RESOURCE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the amount is negative
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionResourceLevel(regionId, resourceId, -12312L);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NEGATIVE_RESOURCE_AMOUNT, scenarioException.getScenarioErrorType());

		// precondition: if the region resource level was previously set
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionResourceLevel(regionId, resourceId, amount);
		experimentBuilder.addRegionResourceLevel(regionId, resourceId, amount);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_DIMENSION_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: the experiment space is well formed
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);

		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		Set<Long> regionResourceLevels = generateResourceLevels(TEST_DIMENSION_VALUE_COUNT);
		for (Long regionResourceLevel : regionResourceLevels) {
			experimentBuilder.addRegionResourceLevel(regionId, resourceId, regionResourceLevel);
			experimentTestVariableBuilder.addValue(regionResourceLevel);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getRegionResourceLevel(regionId, resourceId));
		experimentTestSpaceBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		experimentTestSpace.assertEqualSpaces(getScenarios(experimentBuilder.build()));

	}

	/**
	 * Tests {@link ExperimentBuilder#addResource(ResourceId)}
	 */
	@Test
	@UnitTestMethod(name = "addResource", args = { ResourceId.class })
	public void testAddResource() {
		refreshRandomGenerator(21);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		ResourceId resourceId = XTestResourceId.RESOURCE2;

		// precondition: if the resource id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(null);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the resource was previously added
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.addResource(resourceId);

		scenarioException = assertThrows(ScenarioException.class, () -> experimentBuilder.build());
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: all the scenarios contain the resource
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(resourceId);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());
		assertTrue(scenarios.size() > 0);
		for (Scenario scenario : scenarios) {
			assertTrue(scenario.getResourceIds().contains(resourceId));
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addResourcePropertyValue(ResourceId, ResourcePropertyId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "addResourcePropertyValue", args = { ResourceId.class, ResourcePropertyId.class, Object.class })
	public void testAddResourcePropertyValue() {
		refreshRandomGenerator(22);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		ResourceId resourceId = XTestResourceId.RESOURCE8;
		ResourcePropertyId resourcePropertyId = XTestResourceId.RESOURCE8.getResourcePropertyIds()[0];
		Object propertyValue = 534;
		PropertyDefinition propertyDefinition = PropertyDefinition.builder().setType(Integer.class).setDefaultValue(12).build();

		// precondition: if the resource id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResourcePropertyValue(null, resourcePropertyId, propertyValue);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, propertyDefinition);
		experimentBuilder.addResource(resourceId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the resource id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResourcePropertyValue(XTestResourceId.getUnknownResourceId(), resourcePropertyId, propertyValue);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, propertyDefinition);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_RESOURCE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the resource property id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResourcePropertyValue(resourceId, null, propertyValue);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, propertyDefinition);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the resource property id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResourcePropertyValue(resourceId, XTestResourceId.getUnknownResourcePropertyId(), propertyValue);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, propertyDefinition);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_RESOURCE_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the value is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, null);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, propertyDefinition);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_PROPERTY_VALUE, scenarioException.getScenarioErrorType());

		// precondition: if the value is not compatible with the property
		// definition
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, "incompatible value");
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, propertyDefinition);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.INCOMPATIBLE_VALUE, scenarioException.getScenarioErrorType());

		// precondition: if the resource property value was previously set
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, propertyValue);
		experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, propertyValue);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, propertyDefinition);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_DIMENSION_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: the experiment space is well formed
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, propertyDefinition);
		experimentBuilder.addResource(resourceId);

		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		Set<Object> resourcePropertyValues = generatePropertyValues(propertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		for (Object resourcePropertyValue : resourcePropertyValues) {
			experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, resourcePropertyValue);
			experimentTestVariableBuilder.addValue(resourcePropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getResourcePropertyValue(resourceId, resourcePropertyId));
		experimentTestSpaceBuilder.addExperimentVariable(experimentTestVariableBuilder.build());
		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		experimentTestSpace.assertEqualSpaces(getScenarios(experimentBuilder.build()));
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addStage(StageId, boolean, MaterialsProducerId)}
	 */
	@Test
	@UnitTestMethod(name = "addStage", args = { StageId.class, boolean.class, MaterialsProducerId.class })
	public void testAddStage() {
		refreshRandomGenerator(23);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		StageId stageId = new StageId(67);

		MaterialsProducerId materialsProducerId = XTestMaterialsProducerId.MATERIALS_PRODUCER_3;

		// precondition: if the stage id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addStage(null, true, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_STAGE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addStage(stageId, true, null);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_MATERIALS_PRODUCER_ID, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addStage(stageId, true, XTestMaterialsProducerId.MATERIALS_PRODUCER_2);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_MATERIALS_PRODUCER_ID, scenarioException.getScenarioErrorType());

		// precondition: if the stage id was previously added
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addStage(stageId, true, materialsProducerId);
		experimentBuilder.addStage(stageId, true, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		// postcondition tests for an initially offered stage
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addStage(stageId, true, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());
		assertTrue(scenarios.size() > 0);
		for (Scenario scenario : scenarios) {
			// postcondition: the scenario contains the stage id
			assertTrue(scenario.getStageIds().contains(stageId));
			// postcondition: the scenario contains the stage id
			assertTrue(scenario.isStageOffered(stageId));
			// postcondition: the stage is owned by the materials producer in
			// the
			// scenario
			assertEquals(materialsProducerId, scenario.getStageMaterialsProducer(stageId));
			// postcondition: the stage has no associated batches in the
			// scenario
			assertTrue(scenario.getStageBatches(stageId).isEmpty());
		}

		// postcondition tests for a stage not yet offered
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addStage(stageId, false, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		scenarios = getScenarios(experimentBuilder.build());
		assertTrue(scenarios.size() > 0);
		for (Scenario scenario : scenarios) {
			// postcondition: the scenario contains the stage id
			assertTrue(scenario.getStageIds().contains(stageId));
			// postcondition: the scenario contains the stage id
			assertFalse(scenario.isStageOffered(stageId));
			// postcondition: the stage is owned by the materials producer in
			// the
			// scenario
			assertEquals(materialsProducerId, scenario.getStageMaterialsProducer(stageId));
			// postcondition: the stage has no associated batches in the
			// scenario
			assertTrue(scenario.getStageBatches(stageId).isEmpty());
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#defineBatchProperty(MaterialId, BatchPropertyId, PropertyDefinition)}
	 */
	@Test
	@UnitTestMethod(name = "defineBatchProperty", args = { MaterialId.class, BatchPropertyId.class, PropertyDefinition.class })
	public void testDefineBatchProperty() {
		refreshRandomGenerator(24);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		PropertyDefinition propertyDefinition = generateRandomPropertyDefinition();
		MaterialId materialId = XTestMaterialId.MATERIAL_1;
		BatchPropertyId batchPropertyId = XTestMaterialId.MATERIAL_1.getBatchPropertyIds()[0];

		// precondition: if the material id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineBatchProperty(null, batchPropertyId, propertyDefinition);
		experimentBuilder.addMaterial(materialId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_MATERIAL_ID, scenarioException.getScenarioErrorType());

		// precondition: if the material id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_MATERIAL_ID, scenarioException.getScenarioErrorType());

		// precondition: if the property id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineBatchProperty(materialId, null, propertyDefinition);
		experimentBuilder.addMaterial(materialId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_BATCH_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the property definition is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, null);
		experimentBuilder.addMaterial(materialId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_BATCH_PROPERTY_DEFINITION, scenarioException.getScenarioErrorType());

		// precondition: if the batch property was previously defined
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.addMaterial(materialId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: the batch property is contained in all scenarios
		for (XTestMaterialId material : XTestMaterialId.values()) {
			for (BatchPropertyId property : material.getBatchPropertyIds()) {
				propertyDefinition = generateRandomPropertyDefinition();
				fillWithVariantGlobalProperties(experimentBuilder);
				experimentBuilder.defineBatchProperty(material, property, propertyDefinition);
				experimentBuilder.addMaterial(material);
				List<Scenario> scenarios = getScenarios(experimentBuilder.build());
				assertTrue(scenarios.size() > 0);
				for (Scenario scenario : scenarios) {
					// postcondition: the scenario should contain the property
					// id
					assertTrue(scenario.getBatchPropertyIds(material).contains(property));
					// postcondition: the scenario should contain the property
					// definition
					assertEquals(propertyDefinition, scenario.getBatchPropertyDefinition(material, property));
				}
			}
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#defineCompartmentProperty(CompartmentId, CompartmentPropertyId, PropertyDefinition)}
	 */
	@Test
	@UnitTestMethod(name = "defineCompartmentProperty", args = { CompartmentId.class, CompartmentPropertyId.class, PropertyDefinition.class })
	public void testDefineCompartmentProperty() {
		refreshRandomGenerator(25);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_1;
		CompartmentPropertyId compartmentPropertyId = TestCompartmentId.COMPARTMENT_1.getCompartmentPropertyId(0);
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(5)//
																	.build();

		// precondition: if the compartment id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new EmptyComponent()::init);
		experimentBuilder.defineCompartmentProperty(null, compartmentPropertyId, propertyDefinition);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_COMPARTMENT_ID, scenarioException.getScenarioErrorType());

		// precondition: if the compartment id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new EmptyComponent()::init);
		experimentBuilder.defineCompartmentProperty(TestCompartmentId.getUnknownCompartmentId(), compartmentPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_COMPARTMENT_ID, scenarioException.getScenarioErrorType());

		// precondition: if the compartment property id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new EmptyComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, null, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_COMPARTMENT_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the property definition is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new EmptyComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_COMPARTMENT_PROPERTY_DEFINITION, scenarioException.getScenarioErrorType());

		// precondition: if the compartment property was previously defined
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new EmptyComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, propertyDefinition);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: all scenarios contain the compartment property
		// definition
		for (int i = 0; i < 100; i++) {
			compartmentPropertyId = TestCompartmentId.COMPARTMENT_1.getCompartmentPropertyIds()[0];
			PropertyDefinition propertyDef = generateRandomPropertyDefinition();
			fillWithVariantGlobalProperties(experimentBuilder);
			experimentBuilder.addCompartmentId(compartmentId, () -> new EmptyComponent()::init);
			experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, propertyDef);
			List<Scenario> scenarios = getScenarios(experimentBuilder.build());
			assertTrue(scenarios.size() > 0);
			for (Scenario scenario : scenarios) {
				// postcondition: the scenario should contain the property id
				assertTrue(scenario.getCompartmentPropertyIds(compartmentId).contains(compartmentPropertyId));
				// postcondition: the scenario should contain the property
				// definition
				assertEquals(propertyDef, scenario.getCompartmentPropertyDefinition(compartmentId, compartmentPropertyId));
			}
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#defineGlobalProperty(GlobalPropertyId, PropertyDefinition)}
	 */
	@Test
	@UnitTestMethod(name = "defineGlobalProperty", args = { GlobalPropertyId.class, PropertyDefinition.class })
	public void testDefineGlobalProperty() {
		refreshRandomGenerator(26);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		GlobalPropertyId globalPropertyId = TestGlobalPropertyId.Global_Property_1;
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(5)//
																	.build();

		// precondition: if the property id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineGlobalProperty(null, propertyDefinition);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GLOBAL_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the property definition is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineGlobalProperty(globalPropertyId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GLOBAL_PROPERTY_DEFINITION, scenarioException.getScenarioErrorType());

		// precondition: if the global property was previously defined
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineGlobalProperty(globalPropertyId, propertyDefinition);
		experimentBuilder.defineGlobalProperty(globalPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: all the scenarios contain the global property
		// definition
		for (int i = 0; i < 1000; i++) {
			GlobalPropertyId property = new GlobalPropertyId() {
			};
			PropertyDefinition propertyDef = generateRandomPropertyDefinition();
			fillWithVariantGlobalProperties(experimentBuilder);
			experimentBuilder.defineGlobalProperty(property, propertyDef);
			List<Scenario> scenarios = getScenarios(experimentBuilder.build());
			assertTrue(scenarios.size() > 0);
			for (Scenario scenario : scenarios) {
				// postcondition: the scenario should contain the property id
				assertTrue(scenario.getGlobalPropertyIds().contains(property));
				// postcondition: the scenario should contain the property
				// definition
				assertEquals(propertyDef, scenario.getGlobalPropertyDefinition(property));
			}
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#defineGroupProperty(GroupTypeId, GroupPropertyId, PropertyDefinition)}
	 */
	@Test
	@UnitTestMethod(name = "defineGroupProperty", args = { GroupTypeId.class, GroupPropertyId.class, PropertyDefinition.class })
	public void testDefineGroupProperty() {
		refreshRandomGenerator(27);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		GroupTypeId groupTypeId = XTestGroupTypeId.GROUP_TYPE_1;
		GroupPropertyId groupPropertyId = XTestGroupTypeId.GROUP_TYPE_1.getGroupPropertyIds()[0];
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(235)//
																	.build();

		// precondition: if the group type id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineGroupProperty(null, groupPropertyId, propertyDefinition);
		experimentBuilder.addGroupTypeId(groupTypeId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GROUP_TYPE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the group type id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_GROUP_TYPE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the property id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineGroupProperty(groupTypeId, null, propertyDefinition);
		experimentBuilder.addGroupTypeId(groupTypeId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GROUP_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the property definition is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, null);
		experimentBuilder.addGroupTypeId(groupTypeId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GROUP_PROPERTY_DEFINITION, scenarioException.getScenarioErrorType());

		// precondition: if the group property was previously defined
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, propertyDefinition);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, propertyDefinition);
		experimentBuilder.addGroupTypeId(groupTypeId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		for (int i = 0; i < 1000; i++) {
			GroupPropertyId property = new GroupPropertyId() {
			};
			groupTypeId = XTestGroupTypeId.getRandomGroupTypeId(RANDOM_GENERATOR);
			propertyDefinition = generateRandomPropertyDefinition();
			fillWithVariantGlobalProperties(experimentBuilder);
			experimentBuilder.defineGroupProperty(groupTypeId, property, propertyDefinition);
			experimentBuilder.addGroupTypeId(groupTypeId);
			List<Scenario> scenarios = getScenarios(experimentBuilder.build());
			assertTrue(scenarios.size() > 0);
			for (Scenario scenario : scenarios) {
				// postcondition: the scenario should contain the property id
				assertTrue(scenario.getGroupPropertyIds(groupTypeId).contains(property));
				// postcondition: the scenario should contain the property
				// definition
				assertEquals(propertyDefinition, scenario.getGroupPropertyDefinition(groupTypeId, property));
			}
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#defineMaterialsProducerProperty(MaterialsProducerPropertyId, PropertyDefinition)}
	 */
	@Test
	@UnitTestMethod(name = "defineMaterialsProducerProperty", args = { MaterialsProducerPropertyId.class, PropertyDefinition.class })
	public void testDefineMaterialsProducerProperty() {
		refreshRandomGenerator(28);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		MaterialsProducerPropertyId materialsProducerPropertyId = XTestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1;
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(6)//
																	.build();

		// precondition: if the property id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineMaterialsProducerProperty(null, propertyDefinition);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_MATERIALS_PRODUCER_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the property definition is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_MATERIALS_PRODUCER_PROPERTY_DEFINITION, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer property was previously
		// defined
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, propertyDefinition);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: all scenarios contain the materials producer property
		// definition
		for (int i = 0; i < 1000; i++) {
			MaterialsProducerPropertyId property = new MaterialsProducerPropertyId() {
			};
			fillWithVariantGlobalProperties(experimentBuilder);
			propertyDefinition = generateRandomPropertyDefinition();
			experimentBuilder.defineMaterialsProducerProperty(property, propertyDefinition);

			List<Scenario> scenarios = getScenarios(experimentBuilder.build());
			assertTrue(scenarios.size() > 0);
			for (Scenario scenario : scenarios) {
				// postcondition: the scenario should contain the property id
				assertTrue(scenario.getMaterialsProducerPropertyIds().contains(property));
				// postcondition: the scenario should contain the property
				// definition
				assertEquals(propertyDefinition, scenario.getMaterialsProducerPropertyDefinition(property));
			}
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#definePersonProperty(PersonPropertyId, PropertyDefinition)}
	 */
	@Test
	@UnitTestMethod(name = "definePersonProperty", args = { PersonPropertyId.class, PropertyDefinition.class })
	public void testDefinePersonProperty() {
		refreshRandomGenerator(29);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		PersonPropertyId personPropertyId = TestPersonPropertyId.PERSON_PROPERTY_1_BOOLEAN_MUTABLE_NO_TRACK;
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(String.class)//
																	.setDefaultValue("value")//
																	.build();

		// precondition if the property id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.definePersonProperty(null, propertyDefinition);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_PERSON_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition if the property definition is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.definePersonProperty(personPropertyId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_PERSON_PROPERTY_DEFINITION, scenarioException.getScenarioErrorType());

		// precondition if the person property was previously defined
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.definePersonProperty(personPropertyId, propertyDefinition);
		experimentBuilder.definePersonProperty(personPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		for (int i = 0; i < 1000; i++) {
			fillWithVariantGlobalProperties(experimentBuilder);
			PersonPropertyId property = new PersonPropertyId() {
			};
			propertyDefinition = generateRandomPropertyDefinition();
			experimentBuilder.definePersonProperty(property, propertyDefinition);
			List<Scenario> scenarios = getScenarios(experimentBuilder.build());
			assertTrue(scenarios.size() > 0);
			for (Scenario scenario : scenarios) {
				// postcondition: the scenario should contain the property id
				assertTrue(scenario.getPersonPropertyIds().contains(property));
				// postcondition: the scenario should contain the property
				// definition
				assertEquals(propertyDefinition, scenario.getPersonPropertyDefinition(property));
			}
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#defineRegionProperty(RegionPropertyId, PropertyDefinition)}
	 */
	@Test
	@UnitTestMethod(name = "defineRegionProperty", args = { RegionPropertyId.class, PropertyDefinition.class })
	public void testDefineRegionProperty() {
		refreshRandomGenerator(30);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		RegionPropertyId regionPropertyId = TestRegionPropertyId.REGION_PROPERTY_1;
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Double.class)//
																	.setDefaultValue(6.7)//
																	.build();

		// precondition: if the property id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineRegionProperty(null, propertyDefinition);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_REGION_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the property definition is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineRegionProperty(regionPropertyId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_REGION_PROPERTY_DEFINITION, scenarioException.getScenarioErrorType());

		// precondition: if the region property was previously defined
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineRegionProperty(regionPropertyId, propertyDefinition);
		experimentBuilder.defineRegionProperty(regionPropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: all scenarios contain the region property definition
		for (int i = 0; i < 1000; i++) {
			fillWithVariantGlobalProperties(experimentBuilder);
			RegionPropertyId property = new RegionPropertyId() {
			};
			propertyDefinition = generateRandomPropertyDefinition();
			experimentBuilder.defineRegionProperty(property, propertyDefinition);
			List<Scenario> scenarios = getScenarios(experimentBuilder.build());
			assertTrue(scenarios.size() > 0);
			for (Scenario scenario : scenarios) {
				// postcondition: the scenario should contain the property id
				assertTrue(scenario.getRegionPropertyIds().contains(property));
				// postcondition: the scenario should contain the property
				// definition
				assertEquals(propertyDefinition, scenario.getRegionPropertyDefinition(property));
			}
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#defineResourceProperty(ResourceId, ResourcePropertyId, PropertyDefinition)}
	 */
	@Test
	@UnitTestMethod(name = "defineResourceProperty", args = { ResourceId.class, ResourcePropertyId.class, PropertyDefinition.class })
	public void testDefineResourceProperty() {
		refreshRandomGenerator(31);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		ResourceId resourceId = XTestResourceId.RESOURCE4;
		ResourcePropertyId resourcePropertyId = XTestResourceId.RESOURCE4.getResourcePropertyIds()[0];
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Long.class)//
																	.setDefaultValue(3454L)//
																	.build();

		// precondition: if the property id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(null, resourcePropertyId, propertyDefinition);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the property id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(XTestResourceId.getUnknownResourceId(), resourcePropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_RESOURCE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the property id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(resourceId, null, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the property definition is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_PROPERTY_DEFINITION, scenarioException.getScenarioErrorType());

		// precondition: if the resource property was previously defined
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, propertyDefinition);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, propertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		for (int i = 0; i < 100; i++) {
			fillWithVariantGlobalProperties(experimentBuilder);
			experimentBuilder.addResource(resourceId);
			ResourcePropertyId property = new ResourcePropertyId() {
			};
			propertyDefinition = generateRandomPropertyDefinition();
			experimentBuilder.defineResourceProperty(resourceId, property, propertyDefinition);
			List<Scenario> scenarios = getScenarios(experimentBuilder.build());
			assertTrue(scenarios.size() > 0);
			for (Scenario scenario : scenarios) {
				// postcondition: the scenario should contain the property id
				assertTrue(scenario.getResourcePropertyIds(resourceId).contains(property));
				// postcondition: the scenario should contain the property
				// definition
				assertEquals(propertyDefinition, scenario.getResourcePropertyDefinition(resourceId, property));
			}
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#setPersonCompartmentArrivalTracking(TimeTrackingPolicy)}
	 */
	@Test
	@UnitTestMethod(name = "setPersonCompartmentArrivalTracking", args = { TimeTrackingPolicy.class })
	public void testSetPersonCompartmentArrivalTracking() {
		refreshRandomGenerator(33);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		for (TimeTrackingPolicy timeTrackingPolicy : TimeTrackingPolicy.values()) {

			// precondition: if the trackPersonCompartmentArrivalTimes is null
			fillWithVariantGlobalProperties(experimentBuilder);
			experimentBuilder.setPersonCompartmentArrivalTracking(null);
			ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
			assertEquals(ScenarioErrorType.NULL_COMPARTMENT_TRACKING_POLICY, scenarioException.getScenarioErrorType());

			// precondition: if the compartment arrival TimeTrackingPolicy was
			// previously set
			fillWithVariantGlobalProperties(experimentBuilder);
			experimentBuilder.setPersonCompartmentArrivalTracking(timeTrackingPolicy);
			experimentBuilder.setPersonCompartmentArrivalTracking(timeTrackingPolicy);
			scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
			assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

			// postcondition: all scenarios have the expected person compartment
			// tracking policy
			experimentBuilder.setPersonCompartmentArrivalTracking(timeTrackingPolicy);
			fillWithVariantGlobalProperties(experimentBuilder);
			List<Scenario> scenarios = getScenarios(experimentBuilder.build());
			assertTrue(scenarios.size() > 0);
			for (Scenario scenario : scenarios) {
				assertEquals(timeTrackingPolicy, scenario.getPersonCompartmentArrivalTrackingPolicy());
			}
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#setPersonRegionArrivalTracking(TimeTrackingPolicy)}
	 */
	@Test
	@UnitTestMethod(name = "setPersonRegionArrivalTracking", args = { TimeTrackingPolicy.class })
	public void testSetPersonRegionArrivalTracking() {
		refreshRandomGenerator(34);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		for (TimeTrackingPolicy timeTrackingPolicy : TimeTrackingPolicy.values()) {

			// precondition: if the trackPersonRegionArrivalTimes is null
			fillWithVariantGlobalProperties(experimentBuilder);
			experimentBuilder.setPersonRegionArrivalTracking(null);
			ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
			assertEquals(ScenarioErrorType.NULL_REGION_TRACKING_POLICY, scenarioException.getScenarioErrorType());

			// precondition: if the region arrival TimeTrackingPolicy was
			// previously set
			fillWithVariantGlobalProperties(experimentBuilder);
			experimentBuilder.setPersonRegionArrivalTracking(timeTrackingPolicy);
			experimentBuilder.setPersonRegionArrivalTracking(timeTrackingPolicy);
			scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
			assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

			// postcondition: all scenarios have the expected region arrival
			// tracking policy
			fillWithVariantGlobalProperties(experimentBuilder);
			experimentBuilder.setPersonRegionArrivalTracking(timeTrackingPolicy);
			List<Scenario> scenarios = getScenarios(experimentBuilder.build());
			assertTrue(scenarios.size() > 0);
			for (Scenario scenario : scenarios) {
				assertEquals(timeTrackingPolicy, scenario.getPersonRegionArrivalTrackingPolicy());
			}
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#setResourceTimeTracking(ResourceId, TimeTrackingPolicy)}
	 */
	@Test
	@UnitTestMethod(name = "setResourceTimeTracking", args = { ResourceId.class, TimeTrackingPolicy.class })
	public void testSetResourceTimeTracking() {
		refreshRandomGenerator(36);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		ResourceId resourceId = XTestResourceId.RESOURCE5;
		TimeTrackingPolicy timeTrackingPolicy = TimeTrackingPolicy.DO_NOT_TRACK_TIME;

		// precondition: if the resource id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.setResourceTimeTracking(null, timeTrackingPolicy);
		experimentBuilder.addResource(resourceId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the resource id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.setResourceTimeTracking(XTestResourceId.getUnknownResourceId(), timeTrackingPolicy);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_RESOURCE_ID, scenarioException.getScenarioErrorType());

		// precondition: if the trackValueAssignmentTimes is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.setResourceTimeTracking(resourceId, null);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_TRACKING_POLICY, scenarioException.getScenarioErrorType());

		// precondition: if the resource TimeTrackingPolicy was previously set
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.setResourceTimeTracking(resourceId, timeTrackingPolicy);
		experimentBuilder.setResourceTimeTracking(resourceId, timeTrackingPolicy);
		experimentBuilder.addResource(resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: the resource has the expected time tracking policy
		// value in all scenarios
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.setResourceTimeTracking(resourceId, timeTrackingPolicy);
		experimentBuilder.addResource(resourceId);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());
		assertTrue(scenarios.size() > 0);
		for (Scenario scenario : scenarios) {
			assertEquals(timeTrackingPolicy, scenario.getPersonResourceTimeTrackingPolicy(resourceId));
		}
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#covaryCompartmentProperty(CompartmentId, CompartmentPropertyId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "covaryCompartmentProperty", args = { CompartmentId.class, CompartmentPropertyId.class, Object.class })
	public void testCovaryCompartmentProperty() {
		refreshRandomGenerator(37);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_1;
		Object dimensionId = "DimensionId";
		CompartmentPropertyId compartmentPropertyId = TestCompartmentId.COMPARTMENT_1.getCompartmentPropertyId(0);
		PropertyDefinition compartmentPropertyDefinition = PropertyDefinition	.builder()//
																				.setType(Integer.class)//
																				.setDefaultValue(45)//
																				.build();
		PropertyDefinition globalPropertyDefinition = PropertyDefinition.builder()//
																		.setType(String.class)//
																		.setDefaultValue("default")//
																		.build();

		// precondition: if the compartment id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		experimentBuilder.addCompartmentPropertyValue(null, compartmentPropertyId, generatePropertyValue(compartmentPropertyDefinition));
		experimentBuilder.covaryCompartmentProperty(null, compartmentPropertyId, dimensionId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_COMPARTMENT_ID, scenarioException.getScenarioErrorType());

		// precondition: if the compartment id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new EmptyComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		CompartmentId unknownCompartmentId = TestCompartmentId.getUnknownCompartmentId();
		experimentBuilder.covaryCompartmentProperty(unknownCompartmentId, compartmentPropertyId, dimensionId);
		experimentBuilder.addCompartmentPropertyValue(unknownCompartmentId, compartmentPropertyId, 33);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_COMPARTMENT_ID, scenarioException.getScenarioErrorType());

		// precondition: if the property id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, null, generatePropertyValue(compartmentPropertyDefinition));
		experimentBuilder.covaryCompartmentProperty(compartmentId, null, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_COMPARTMENT_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the property id is unknown
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, generatePropertyValue(compartmentPropertyDefinition));
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_COMPARTMENT_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// precondition: if the dimension id is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, generatePropertyValue(compartmentPropertyDefinition));
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_DIMENSION_IDENTIFIER, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the number of property values for the compartment
		 * and property does not match the number of values for all other
		 * variables joined under the given dimensionId
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, 10);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, 11);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, 12);
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, dimensionId);
		experimentBuilder.defineGlobalProperty(TestGlobalPropertyId.Global_Property_3, globalPropertyDefinition);
		experimentBuilder.addGlobalPropertyValue(TestGlobalPropertyId.Global_Property_3, "x");
		experimentBuilder.addGlobalPropertyValue(TestGlobalPropertyId.Global_Property_3, "y");
		experimentBuilder.covaryGlobalProperty(TestGlobalPropertyId.Global_Property_3, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.EXPERIMENT_VARIABLE_SIZE_MISMATCH, scenarioException.getScenarioErrorType());

		// precondition: if the compartment property was previously declared as
		// covariant
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, 10);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, 11);
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, dimensionId);
		experimentBuilder.defineGlobalProperty(TestGlobalPropertyId.Global_Property_3, globalPropertyDefinition);
		experimentBuilder.addGlobalPropertyValue(TestGlobalPropertyId.Global_Property_3, "x");
		experimentBuilder.addGlobalPropertyValue(TestGlobalPropertyId.Global_Property_3, "y");
		experimentBuilder.covaryGlobalProperty(TestGlobalPropertyId.Global_Property_3, dimensionId);
		experimentBuilder.covaryGlobalProperty(TestGlobalPropertyId.Global_Property_3, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_COVARIANT_DECLARATION, scenarioException.getScenarioErrorType());

		// postcondition tests
		/*
		 * Build a list of scenarios using variant values for three global
		 * properties and variant values for one compartment property. Covary
		 * one of the global properties with the compartment property.
		 */
		Set<Object> compartmentPropertyValues = generatePropertyValues(compartmentPropertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		Set<Object> globalPropertyValues = generatePropertyValues(globalPropertyDefinition, TEST_DIMENSION_VALUE_COUNT);

		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, dimensionId);
		experimentBuilder.defineGlobalProperty(TestGlobalPropertyId.Global_Property_3, globalPropertyDefinition);
		experimentBuilder.covaryGlobalProperty(TestGlobalPropertyId.Global_Property_3, dimensionId);
		for (Object compartmentPropertyValue : compartmentPropertyValues) {
			experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, compartmentPropertyValue);
		}
		for (Object globalPropertyValue : globalPropertyValues) {
			experimentBuilder.addGlobalPropertyValue(TestGlobalPropertyId.Global_Property_3, globalPropertyValue);
		}
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());

		/*
		 * Build an ExperimentTestSpace that reflects our expectations of the
		 * the dimensions and values within the experiment space.
		 */
		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestDimensionBuilder experimentTestDimensionBuilder = new ExperimentTestDimensionBuilder();
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		for (Object compartmentPropertyValue : compartmentPropertyValues) {
			experimentTestVariableBuilder.addValue(compartmentPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getCompartmentPropertyValue(compartmentId, compartmentPropertyId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());
		for (Object globalPropertyValue : globalPropertyValues) {
			experimentTestVariableBuilder.addValue(globalPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getGlobalPropertyValue(TestGlobalPropertyId.Global_Property_3));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		experimentTestSpaceBuilder.addExperimentDimension(experimentTestDimensionBuilder.build());

		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		/*
		 * Show that the list of scenarios matches our expectations on the
		 * detail of the experiment space
		 */
		experimentTestSpace.assertEqualSpaces(scenarios);

	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#covaryBatchProperty(BatchId, BatchPropertyId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "covaryBatchProperty", args = { BatchId.class, BatchPropertyId.class, Object.class })
	public void testCovaryBatchProperty() {
		refreshRandomGenerator(38);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		Object dimensionId = "DimensionId";
		BatchPropertyId batchPropertyId = XTestMaterialId.MATERIAL_1.getBatchPropertyIds()[0];
		BatchPropertyId unknownPropertyId = XTestMaterialId.getUnknownBatchPropertyId();
		BatchId batchId = new BatchId(763);
		BatchId unknownBatchId = new BatchId(500);
		MaterialId materialId = XTestMaterialId.MATERIAL_1;
		double amount = 1000;
		MaterialsProducerId materialsProducerId = XTestMaterialsProducerId.MATERIALS_PRODUCER_2;
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(100)//
																	.build();
		PropertyDefinition globalPropertyDefinition = PropertyDefinition.builder()//
																		.setType(String.class)//
																		.setDefaultValue("default")//
																		.build();

		/*
		 * precondition: if the batch id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, 76);
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, 77);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.addBatchPropertyValue(null, batchPropertyId, generatePropertyValue(propertyDefinition));
		experimentBuilder.covaryBatchProperty(null, batchPropertyId, dimensionId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_BATCH_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the batch id is unknown
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addBatchPropertyValue(unknownBatchId, batchPropertyId, 76);
		experimentBuilder.addBatchPropertyValue(unknownBatchId, batchPropertyId, 77);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.covaryBatchProperty(unknownBatchId, batchPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_BATCH_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the property id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, 76);
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, 77);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.addBatchPropertyValue(batchId, null, generatePropertyValue(propertyDefinition));
		experimentBuilder.covaryBatchProperty(batchId, null, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_BATCH_PROPERTY_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the property id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addBatchPropertyValue(batchId, unknownPropertyId, 76);
		experimentBuilder.addBatchPropertyValue(batchId, unknownPropertyId, 77);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.covaryBatchProperty(batchId, unknownPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_BATCH_PROPERTY_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the dimension id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, 76);
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, 77);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.covaryBatchProperty(batchId, batchPropertyId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_DIMENSION_IDENTIFIER, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if number of property values for the compartment and
		 * property does not match the number of values for all other variables
		 * joined under the given dimensionId
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, 76);
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, 77);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.covaryBatchProperty(batchId, batchPropertyId, dimensionId);
		experimentBuilder.defineGlobalProperty(TestGlobalPropertyId.Global_Property_3, globalPropertyDefinition);
		experimentBuilder.addGlobalPropertyValue(TestGlobalPropertyId.Global_Property_3, "x");
		experimentBuilder.addGlobalPropertyValue(TestGlobalPropertyId.Global_Property_3, "y");
		experimentBuilder.addGlobalPropertyValue(TestGlobalPropertyId.Global_Property_3, "z");
		experimentBuilder.covaryGlobalProperty(TestGlobalPropertyId.Global_Property_3, dimensionId);

		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.EXPERIMENT_VARIABLE_SIZE_MISMATCH, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the batch property was previously declared as
		 * covariant
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, 76);
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, 77);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.covaryBatchProperty(batchId, batchPropertyId, dimensionId);
		experimentBuilder.covaryBatchProperty(batchId, batchPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_COVARIANT_DECLARATION, scenarioException.getScenarioErrorType());

		// postcondition tests
		/*
		 * Build a list of scenarios using variant values for three global
		 * properties and variant values for one batch property of one batch.
		 * Covary one of the global properties with the batch property for the
		 * selected batch.
		 */
		Set<Object> batchPropertyValues = generatePropertyValues(propertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		Set<Object> globalPropertyValues = generatePropertyValues(globalPropertyDefinition, TEST_DIMENSION_VALUE_COUNT);

		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineGlobalProperty(TestGlobalPropertyId.Global_Property_3, globalPropertyDefinition);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);

		for (Object batchPropertyValue : batchPropertyValues) {
			experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, batchPropertyValue);
		}
		for (Object globalPropertyValue : globalPropertyValues) {
			experimentBuilder.addGlobalPropertyValue(TestGlobalPropertyId.Global_Property_3, globalPropertyValue);
		}
		experimentBuilder.covaryBatchProperty(batchId, batchPropertyId, dimensionId);
		experimentBuilder.covaryGlobalProperty(TestGlobalPropertyId.Global_Property_3, dimensionId);

		List<Scenario> scenarios = getScenarios(experimentBuilder.build());

		/*
		 * Build an ExperimentTestSpace that reflects our expectations of the
		 * the dimensions and values within the experiment space.
		 */
		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);

		ExperimentTestDimensionBuilder experimentTestDimensionBuilder = new ExperimentTestDimensionBuilder();
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		for (Object batchPropertyValue : batchPropertyValues) {
			experimentTestVariableBuilder.addValue(batchPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getBatchPropertyValue(batchId, batchPropertyId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		for (Object globalPropertyValue : globalPropertyValues) {
			experimentTestVariableBuilder.addValue(globalPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getGlobalPropertyValue(TestGlobalPropertyId.Global_Property_3));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		experimentTestSpaceBuilder.addExperimentDimension(experimentTestDimensionBuilder.build());

		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();

		/*
		 * Show that the list of scenarios matches our expectations on the
		 * detail of the experiment space
		 */
		experimentTestSpace.assertEqualSpaces(scenarios);
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#covaryGlobalProperty(GlobalPropertyId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "covaryGlobalProperty", args = { GlobalPropertyId.class, Object.class })
	public void testCovaryGlobalProperty() {
		refreshRandomGenerator(39);

		GlobalPropertyId globalPropertyId = TestGlobalPropertyId.Global_Property_3;
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(67)//
																	.build();
		Object dimensionId = "DimensionId";
		RegionId regionId = TestRegionId.REGION_4;
		RegionPropertyId regionPropertyId = TestRegionPropertyId.REGION_PROPERTY_3;
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		PropertyDefinition regionPropertyDefinition = PropertyDefinition.builder()//
																		.setType(Double.class)//
																		.setDefaultValue(16.7)//
																		.build();

		/*
		 * precondition: if the property id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineGlobalProperty(globalPropertyId, propertyDefinition);
		experimentBuilder.addGlobalPropertyValue(null, generatePropertyValue(propertyDefinition));
		experimentBuilder.covaryGlobalProperty(null, dimensionId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GLOBAL_PROPERTY_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the property id is unknown
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGlobalPropertyValue(globalPropertyId, generatePropertyValue(propertyDefinition));
		experimentBuilder.covaryGlobalProperty(globalPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_GLOBAL_PROPERTY_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the dimension id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineGlobalProperty(globalPropertyId, propertyDefinition);
		experimentBuilder.addGlobalPropertyValue(globalPropertyId, generatePropertyValue(propertyDefinition));
		experimentBuilder.covaryGlobalProperty(globalPropertyId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_DIMENSION_IDENTIFIER, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if number of values for the global property does not
		 * match the number of values for all other variables joined under the
		 * given dimensionId
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineGlobalProperty(globalPropertyId, propertyDefinition);
		experimentBuilder.covaryGlobalProperty(globalPropertyId, dimensionId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addGlobalPropertyValue(globalPropertyId, 14);
		experimentBuilder.addGlobalPropertyValue(globalPropertyId, 37);
		experimentBuilder.addGlobalPropertyValue(globalPropertyId, 19);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, 24.75);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, 453.2);
		experimentBuilder.defineRegionProperty(regionPropertyId, regionPropertyDefinition);
		experimentBuilder.covaryRegionProperty(regionId, regionPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.EXPERIMENT_VARIABLE_SIZE_MISMATCH, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the global property was previously declared as
		 * covariant
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineGlobalProperty(globalPropertyId, propertyDefinition);
		experimentBuilder.addGlobalPropertyValue(globalPropertyId, generatePropertyValue(propertyDefinition));
		experimentBuilder.covaryGlobalProperty(globalPropertyId, dimensionId);
		experimentBuilder.covaryGlobalProperty(globalPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_COVARIANT_DECLARATION, scenarioException.getScenarioErrorType());

		// postcondition tests
		/*
		 * Build a list of scenarios using variant values for three global
		 * properties and variant values for one region property of one region.
		 * Covary one of the global properties with the region property for the
		 * selected batch.
		 */
		Set<Object> regionPropertyValues = generatePropertyValues(regionPropertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		Set<Object> globalPropertyValues = generatePropertyValues(propertyDefinition, TEST_DIMENSION_VALUE_COUNT);

		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineRegionProperty(regionPropertyId, regionPropertyDefinition);
		experimentBuilder.defineGlobalProperty(TestGlobalPropertyId.Global_Property_3, propertyDefinition);
		experimentBuilder.covaryRegionProperty(regionId, regionPropertyId, dimensionId);
		experimentBuilder.covaryGlobalProperty(TestGlobalPropertyId.Global_Property_3, dimensionId);
		for (Object regionPropertyValue : regionPropertyValues) {
			experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, regionPropertyValue);
		}
		for (Object globalPropertyValue : globalPropertyValues) {
			experimentBuilder.addGlobalPropertyValue(TestGlobalPropertyId.Global_Property_3, globalPropertyValue);
		}

		List<Scenario> scenarios = getScenarios(experimentBuilder.build());

		/*
		 * Build an ExperimentTestSpace that reflects our expectations of the
		 * the dimensions and values within the experiment space.
		 */
		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);

		ExperimentTestDimensionBuilder experimentTestDimensionBuilder = new ExperimentTestDimensionBuilder();
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		for (Object regionPropertyValue : regionPropertyValues) {
			experimentTestVariableBuilder.addValue(regionPropertyValue);
		}

		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getRegionPropertyValue(regionId, regionPropertyId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		for (Object globalPropertyValue : globalPropertyValues) {
			experimentTestVariableBuilder.addValue(globalPropertyValue);
		}

		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getGlobalPropertyValue(TestGlobalPropertyId.Global_Property_3));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		experimentTestSpaceBuilder.addExperimentDimension(experimentTestDimensionBuilder.build());

		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();

		/*
		 * Show that the list of scenarios matches our expectations on the
		 * details of the experiment space
		 */
		experimentTestSpace.assertEqualSpaces(scenarios);

	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#covaryGroupProperty(GroupId, GroupPropertyId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "covaryGroupProperty", args = { GroupId.class, GroupPropertyId.class, Object.class })
	public void testCovaryGroupProperty() {
		refreshRandomGenerator(40);

		GroupId groupId = new GroupId(15);
		GroupPropertyId groupPropertyId = XTestGroupTypeId.GROUP_TYPE_2.getGroupPropertyIds()[0];
		Object dimensionId = "DimensionId";
		GroupTypeId groupTypeId = XTestGroupTypeId.GROUP_TYPE_2;
		PropertyDefinition groupPropertyDefinition = PropertyDefinition	.builder()//
																		.setType(Integer.class)//
																		.setDefaultValue(45)//
																		.build();
		PropertyDefinition compartmentPropertyDefinition = PropertyDefinition	.builder()//
																				.setType(Double.class)//
																				.setDefaultValue(23.67)//
																				.build();
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_1;
		CompartmentPropertyId compartmentPropertyId = TestCompartmentId.COMPARTMENT_1.getCompartmentPropertyId(0);

		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		/*
		 * precondition: if the group id is null
		 * 
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, groupPropertyDefinition);
		experimentBuilder.addGroupPropertyValue(null, groupPropertyId, generatePropertyValue(groupPropertyDefinition));
		experimentBuilder.covaryGroupProperty(null, groupPropertyId, dimensionId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GROUP_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the group id is unknown
		 * 
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroupTypeId(groupTypeId);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, groupPropertyDefinition);
		experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, generatePropertyValue(groupPropertyDefinition));
		experimentBuilder.covaryGroupProperty(groupId, groupPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_GROUP_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the property id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, groupPropertyDefinition);
		experimentBuilder.addGroupPropertyValue(groupId, null, generatePropertyValue(groupPropertyDefinition));
		experimentBuilder.covaryGroupProperty(groupId, null, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_GROUP_PROPERTY_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the property id is unknown
		 * 
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, generatePropertyValue(groupPropertyDefinition));
		experimentBuilder.covaryGroupProperty(groupId, groupPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_GROUP_PROPERTY_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the dimension id is null
		 * 
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, groupPropertyDefinition);
		experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, generatePropertyValue(groupPropertyDefinition));
		experimentBuilder.covaryGroupProperty(groupId, groupPropertyId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_DIMENSION_IDENTIFIER, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if number of property values for the group and property
		 * does not match the number of values for all other variables joined
		 * under the given dimensionId
		 */
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, groupPropertyDefinition);
		experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, 8);
		experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, 12);
		experimentBuilder.covaryGroupProperty(groupId, groupPropertyId, dimensionId);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, 88.8);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, 97.6);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, 13.2);
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, dimensionId);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.EXPERIMENT_VARIABLE_SIZE_MISMATCH, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the group property was previously declared as
		 * covariant
		 * 
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.addGroupTypeId(groupTypeId);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, groupPropertyDefinition);
		experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, generatePropertyValue(groupPropertyDefinition));
		experimentBuilder.covaryGroupProperty(groupId, groupPropertyId, dimensionId);
		experimentBuilder.covaryGroupProperty(groupId, groupPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_COVARIANT_DECLARATION, scenarioException.getScenarioErrorType());

		// postcondition tests

		/*
		 * Build a list of scenarios using variant values for two global
		 * properties, one compartment property and one group property of one
		 * group. Covary the compartment property values with the group property
		 * values.
		 */
		Set<Object> groupPropertyValues = generatePropertyValues(groupPropertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		Set<Object> compartmentPropertyValues = generatePropertyValues(compartmentPropertyDefinition, TEST_DIMENSION_VALUE_COUNT);

		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		for (Object compartmentPropertyValue : compartmentPropertyValues) {
			experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, compartmentPropertyValue);
		}
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, dimensionId);

		experimentBuilder.addGroupTypeId(groupTypeId);
		experimentBuilder.addGroup(groupId, groupTypeId);
		experimentBuilder.defineGroupProperty(groupTypeId, groupPropertyId, groupPropertyDefinition);
		for (Object groupPropertyValue : groupPropertyValues) {
			experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, groupPropertyValue);
		}
		experimentBuilder.covaryGroupProperty(groupId, groupPropertyId, dimensionId);

		List<Scenario> scenarios = getScenarios(experimentBuilder.build());

		/*
		 * Build an ExperimentTestSpace that reflects our expectations of the
		 * the dimensions and values within the experiment space.
		 */
		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);

		ExperimentTestDimensionBuilder experimentTestDimensionBuilder = new ExperimentTestDimensionBuilder();

		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();

		for (Object groupPropertyValue : groupPropertyValues) {
			experimentTestVariableBuilder.addValue(groupPropertyValue);
		}

		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getGroupPropertyValue(groupId, groupPropertyId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		for (Object compartmentPropertyValue : compartmentPropertyValues) {
			experimentTestVariableBuilder.addValue(compartmentPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getCompartmentPropertyValue(compartmentId, compartmentPropertyId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		experimentTestSpaceBuilder.addExperimentDimension(experimentTestDimensionBuilder.build());

		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();

		/*
		 * Show that the list of scenarios matches our expectations on the
		 * details of the experiment space
		 */
		experimentTestSpace.assertEqualSpaces(scenarios);

	}

	/**
	 * Test for
	 * {@link ExperimentBuilder#covaryPersonProperty(PersonId, PersonPropertyId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "covaryPersonProperty", args = { PersonId.class, PersonPropertyId.class, Object.class })
	public void testCovaryPersonProperty() {
		refreshRandomGenerator(41);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		PersonId personId = new PersonId(125623);
		PersonPropertyId personPropertyId = TestPersonPropertyId.PERSON_PROPERTY_8_INTEGER_IMMUTABLE_NO_TRACK;
		Object dimensionId = "DimensionId";
		RegionId regionId = TestRegionId.REGION_3;
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_4;
		PropertyDefinition personPropertyDefinition = PropertyDefinition.builder()//
																		.setType(Integer.class)//
																		.setDefaultValue(645)//
																		.build();

		GlobalPropertyId globalPropertyId = TestGlobalPropertyId.Global_Property_3;
		PropertyDefinition globalPropertyDefinition = PropertyDefinition.builder()//
																		.setType(String.class)//
																		.setDefaultValue("defaultValue")//
																		.build();

		/* precondition: if the person id is null */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.definePersonProperty(personPropertyId, personPropertyDefinition);
		experimentBuilder.addPersonPropertyValue(null, personPropertyId, generatePropertyValue(personPropertyDefinition));
		experimentBuilder.covaryPersonProperty(null, personPropertyId, dimensionId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_PERSON_ID, scenarioException.getScenarioErrorType());

		/* precondition: if the person id is unknown */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.definePersonProperty(personPropertyId, personPropertyDefinition);
		experimentBuilder.addPersonPropertyValue(personId, personPropertyId, generatePropertyValue(personPropertyDefinition));
		experimentBuilder.covaryPersonProperty(personId, personPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_PERSON_ID, scenarioException.getScenarioErrorType());

		/* precondition: if the property id is null */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.definePersonProperty(personPropertyId, personPropertyDefinition);
		experimentBuilder.addPersonPropertyValue(personId, null, generatePropertyValue(personPropertyDefinition));
		experimentBuilder.covaryPersonProperty(personId, null, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_PERSON_PROPERTY_ID, scenarioException.getScenarioErrorType());

		/* precondition: if the property id is unknown */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addPersonPropertyValue(personId, personPropertyId, generatePropertyValue(personPropertyDefinition));
		experimentBuilder.covaryPersonProperty(personId, personPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_PERSON_PROPERTY_ID, scenarioException.getScenarioErrorType());

		// * precondition: if the dimension id is null*/
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.definePersonProperty(personPropertyId, personPropertyDefinition);
		experimentBuilder.addPersonPropertyValue(personId, personPropertyId, generatePropertyValue(personPropertyDefinition));
		experimentBuilder.covaryPersonProperty(personId, personPropertyId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_DIMENSION_IDENTIFIER, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if number of property values for the person and
		 * property does not match the number of values for all other variables
		 * joined under the given dimensionId
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineGlobalProperty(globalPropertyId, globalPropertyDefinition);
		experimentBuilder.addGlobalPropertyValue(globalPropertyId, "a");
		experimentBuilder.addGlobalPropertyValue(globalPropertyId, "b");
		experimentBuilder.addGlobalPropertyValue(globalPropertyId, "c");
		experimentBuilder.covaryGlobalProperty(globalPropertyId, dimensionId);

		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.definePersonProperty(personPropertyId, personPropertyDefinition);
		experimentBuilder.addPersonPropertyValue(personId, personPropertyId, 15);
		experimentBuilder.covaryPersonProperty(personId, personPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.EXPERIMENT_VARIABLE_SIZE_MISMATCH, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the person property was previously declared as
		 * covariant
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.definePersonProperty(personPropertyId, personPropertyDefinition);
		experimentBuilder.addPersonPropertyValue(personId, personPropertyId, generatePropertyValue(personPropertyDefinition));
		experimentBuilder.covaryPersonProperty(personId, personPropertyId, dimensionId);
		experimentBuilder.covaryPersonProperty(personId, personPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_COVARIANT_DECLARATION, scenarioException.getScenarioErrorType());

		// postcondition tests
		/*
		 * Build a list of scenarios using variant values for three global
		 * properties, and one person property on one person. Covary the third
		 * global property values with the person property values.
		 */
		Set<Object> globalPropertyValues = generatePropertyValues(globalPropertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		Set<Object> personPropertyValues = generatePropertyValues(personPropertyDefinition, TEST_DIMENSION_VALUE_COUNT);

		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineGlobalProperty(globalPropertyId, globalPropertyDefinition);
		for (Object globalPropertyValue : globalPropertyValues) {
			experimentBuilder.addGlobalPropertyValue(globalPropertyId, globalPropertyValue);
		}
		experimentBuilder.covaryGlobalProperty(globalPropertyId, dimensionId);
		experimentBuilder.definePersonProperty(personPropertyId, personPropertyDefinition);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		for (Object personPropertyValue : personPropertyValues) {
			experimentBuilder.addPersonPropertyValue(personId, personPropertyId, personPropertyValue);
		}
		experimentBuilder.covaryPersonProperty(personId, personPropertyId, dimensionId);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());

		/*
		 * Build an ExperimentTestSpace that reflects our expectations of the
		 * the dimensions and values within the experiment space.
		 */

		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestDimensionBuilder experimentTestDimensionBuilder = new ExperimentTestDimensionBuilder();
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		for (Object globalPropertyValue : globalPropertyValues) {
			experimentTestVariableBuilder.addValue(globalPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getGlobalPropertyValue(globalPropertyId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());
		for (Object personPropertyValue : personPropertyValues) {
			experimentTestVariableBuilder.addValue(personPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getPersonPropertyValue(personId, personPropertyId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());
		experimentTestSpaceBuilder.addExperimentDimension(experimentTestDimensionBuilder.build());
		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();

		/*
		 * Show that the list of scenarios matches our expectations on the
		 * details of the experiment space
		 */
		experimentTestSpace.assertEqualSpaces(scenarios);
	}

	/**
	 * Test for
	 * {@link ExperimentBuilder#covaryMaterialsProducerProperty(MaterialsProducerId, MaterialsProducerPropertyId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "covaryMaterialsProducerProperty", args = { MaterialsProducerId.class, MaterialsProducerPropertyId.class, Object.class })
	public void testCovaryMaterialsProducerProperty() {
		refreshRandomGenerator(42);

		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		MaterialsProducerId materialsProducerId = XTestMaterialsProducerId.MATERIALS_PRODUCER_3;
		MaterialsProducerPropertyId materialsProducerPropertyId = XTestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_4;
		Object dimensionId = "DimensionId";
		PropertyDefinition materialsProducerPropertyDefinition = PropertyDefinition	.builder()//
																					.setType(Integer.class)//
																					.setDefaultValue(645)//
																					.build();

		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_2;
		CompartmentPropertyId compartmentPropertyId = TestCompartmentId.COMPARTMENT_2.getCompartmentPropertyId(0);
		PropertyDefinition compartmentPropertyDefinition = PropertyDefinition	.builder()//
																				.setType(String.class)//
																				.setDefaultValue("defaultValue")//
																				.build();

		/*
		 * precondition: if the materials producer id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, materialsProducerPropertyDefinition);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addMaterialsProducerPropertyValue(null, materialsProducerPropertyId, generatePropertyValue(materialsProducerPropertyDefinition));
		experimentBuilder.covaryMaterialsProducerProperty(null, materialsProducerPropertyId, dimensionId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_MATERIALS_PRODUCER_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the materials producer id is unknown
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, materialsProducerPropertyDefinition);
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, generatePropertyValue(materialsProducerPropertyDefinition));
		experimentBuilder.covaryMaterialsProducerProperty(materialsProducerId, materialsProducerPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_MATERIALS_PRODUCER_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the property id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, materialsProducerPropertyDefinition);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, null, generatePropertyValue(materialsProducerPropertyDefinition));
		experimentBuilder.covaryMaterialsProducerProperty(materialsProducerId, null, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_MATERIALS_PRODUCER_PROPERTY_ID, scenarioException.getScenarioErrorType());

		/* precondition: if the property id is unknown */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, generatePropertyValue(materialsProducerPropertyDefinition));
		experimentBuilder.covaryMaterialsProducerProperty(materialsProducerId, materialsProducerPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_MATERIALS_PRODUCER_PROPERTY_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the dimension id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, materialsProducerPropertyDefinition);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, generatePropertyValue(materialsProducerPropertyDefinition));
		experimentBuilder.covaryMaterialsProducerProperty(materialsProducerId, materialsProducerPropertyId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_DIMENSION_IDENTIFIER, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if number of property values for the materials producer
		 * and property does not match the number of values for all other
		 * variables joined under the given dimensionId
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, "a");
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, "b");
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, "c");
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, dimensionId);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, materialsProducerPropertyDefinition);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, 123);
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, 345);
		experimentBuilder.covaryMaterialsProducerProperty(materialsProducerId, materialsProducerPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.EXPERIMENT_VARIABLE_SIZE_MISMATCH, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the materials producer property was previously
		 * declared as covariant
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, materialsProducerPropertyDefinition);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, generatePropertyValue(materialsProducerPropertyDefinition));
		experimentBuilder.covaryMaterialsProducerProperty(materialsProducerId, materialsProducerPropertyId, dimensionId);
		experimentBuilder.covaryMaterialsProducerProperty(materialsProducerId, materialsProducerPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_COVARIANT_DECLARATION, scenarioException.getScenarioErrorType());

		// postcondition tests

		/*
		 * Build a list of scenarios using variant values for two global
		 * properties,one compartment property and one materials producer
		 * property. Covary the compartment and materials producer property
		 * values.
		 */
		Set<Object> materialsProducerPropertyValues = generatePropertyValues(materialsProducerPropertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		Set<Object> compartmentPropertyValues = generatePropertyValues(compartmentPropertyDefinition, TEST_DIMENSION_VALUE_COUNT);

		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		for (Object compartmentPropertyValue : compartmentPropertyValues) {
			experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, compartmentPropertyValue);
		}
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, dimensionId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, materialsProducerPropertyDefinition);
		for (Object materialsProducerPropertyValue : materialsProducerPropertyValues) {
			experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, materialsProducerPropertyValue);
		}
		experimentBuilder.covaryMaterialsProducerProperty(materialsProducerId, materialsProducerPropertyId, dimensionId);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());

		/*
		 * Build an ExperimentTestSpace that reflects our expectations of the
		 * the dimensions and values within the experiment space.
		 */
		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestDimensionBuilder experimentTestDimensionBuilder = new ExperimentTestDimensionBuilder();
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		for (Object compartmentPropertyValue : compartmentPropertyValues) {
			experimentTestVariableBuilder.addValue(compartmentPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getCompartmentPropertyValue(compartmentId, compartmentPropertyId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());
		for (Object materialsProducerPropertyValue : materialsProducerPropertyValues) {
			experimentTestVariableBuilder.addValue(materialsProducerPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());
		experimentTestSpaceBuilder.addExperimentDimension(experimentTestDimensionBuilder.build());
		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		/*
		 * Show that the list of scenarios matches our expectations on the
		 * details of the experiment space
		 */
		experimentTestSpace.assertEqualSpaces(scenarios);

	}

	/**
	 * Test for
	 * {@link ExperimentBuilder#covaryPersonResource(PersonId, ResourceId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "covaryPersonResource", args = { PersonId.class, ResourceId.class, Object.class })
	public void testCovaryPersonResource() {
		refreshRandomGenerator(43);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		PersonId personId = new PersonId(36457);
		ResourceId personResourceId = XTestResourceId.RESOURCE10;
		Object dimensionId = "DimensionId";
		RegionId regionId = TestRegionId.REGION_4;
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_2;
		RegionPropertyId regionPropertyId = TestRegionPropertyId.REGION_PROPERTY_11;

		PropertyDefinition regionPropertyDefinition = PropertyDefinition.builder()//
																		.setType(Integer.class)//
																		.setDefaultValue(67445345)//
																		.build();

		/* precondition: if the person id is null */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(personResourceId);
		experimentBuilder.addPersonResourceLevel(null, personResourceId, 234L);
		experimentBuilder.covaryPersonResource(null, personResourceId, dimensionId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_PERSON_ID, scenarioException.getScenarioErrorType());

		/* precondition: if the person id is unknown */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(personResourceId);
		experimentBuilder.addPersonResourceLevel(personId, personResourceId, 234L);
		experimentBuilder.covaryPersonResource(personId, personResourceId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_PERSON_ID, scenarioException.getScenarioErrorType());

		/* precondition: if the resource id is null */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(personResourceId);
		experimentBuilder.addPersonResourceLevel(personId, null, 234L);
		experimentBuilder.covaryPersonResource(personId, null, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_ID, scenarioException.getScenarioErrorType());

		/* precondition: if the resource id is unknown */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addPersonResourceLevel(personId, personResourceId, 234L);
		experimentBuilder.covaryPersonResource(personId, personResourceId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_RESOURCE_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the dimension id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(personResourceId);
		experimentBuilder.addPersonResourceLevel(personId, personResourceId, 234L);
		experimentBuilder.covaryPersonResource(personId, personResourceId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_DIMENSION_IDENTIFIER, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if number of resource values for the person and
		 * resource does not match the number of values for all other variables
		 * joined under the given dimensionId
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.covaryRegionProperty(regionId, regionPropertyId, dimensionId);
		experimentBuilder.addPersonResourceLevel(personId, personResourceId, 234L);
		experimentBuilder.addPersonResourceLevel(personId, personResourceId, 46L);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, 37);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, 235);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, 347);
		experimentBuilder.defineRegionProperty(regionPropertyId, regionPropertyDefinition);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(personResourceId);
		experimentBuilder.covaryPersonResource(personId, personResourceId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.EXPERIMENT_VARIABLE_SIZE_MISMATCH, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the person resource was previously declared as
		 * covariant
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(personResourceId);
		experimentBuilder.addPersonResourceLevel(personId, personResourceId, 234L);
		experimentBuilder.covaryPersonResource(personId, personResourceId, dimensionId);
		experimentBuilder.covaryPersonResource(personId, personResourceId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_COVARIANT_DECLARATION, scenarioException.getScenarioErrorType());

		// postcondition tests
		/*
		 * Build a list of scenarios using variant values for two global
		 * properties,one region property and one person resource property.
		 * Covary the region and person resource property values.
		 */
		Set<Object> regionPropertyValues = generatePropertyValues(regionPropertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		Set<Long> personResourceLevels = generateResourceLevels(TEST_DIMENSION_VALUE_COUNT);

		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineRegionProperty(regionPropertyId, regionPropertyDefinition);
		for (Object regionPropertyValue : regionPropertyValues) {
			experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, regionPropertyValue);
		}
		experimentBuilder.covaryRegionProperty(regionId, regionPropertyId, dimensionId);
		experimentBuilder.addResource(personResourceId);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		for (Long personResourceLevel : personResourceLevels) {
			experimentBuilder.addPersonResourceLevel(personId, personResourceId, personResourceLevel);
		}
		experimentBuilder.covaryPersonResource(personId, personResourceId, dimensionId);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());

		/*
		 * Build an ExperimentTestSpace that reflects our expectations of the
		 * the dimensions and values within the experiment space.
		 */
		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestDimensionBuilder experimentTestDimensionBuilder = new ExperimentTestDimensionBuilder();
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		for (Object regionPropertyValue : regionPropertyValues) {
			experimentTestVariableBuilder.addValue(regionPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getRegionPropertyValue(regionId, regionPropertyId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());
		for (Long personResourceLevel : personResourceLevels) {
			experimentTestVariableBuilder.addValue(personResourceLevel);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getPersonResourceLevel(personId, personResourceId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());
		experimentTestSpaceBuilder.addExperimentDimension(experimentTestDimensionBuilder.build());
		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		/*
		 * Show that the list of scenarios matches our expectations on the
		 * details of the experiment space
		 */
		experimentTestSpace.assertEqualSpaces(scenarios);
	}

	/**
	 * Test for
	 * {@link ExperimentBuilder#covaryMaterialsProducerResource(MaterialsProducerId, ResourceId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "covaryMaterialsProducerResource", args = { MaterialsProducerId.class, ResourceId.class, Object.class })
	public void testCovaryMaterialsProducerResource() {
		refreshRandomGenerator(44);

		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		MaterialsProducerId materialsProducerId = XTestMaterialsProducerId.MATERIALS_PRODUCER_3;
		ResourceId materialsProducerResourceId = XTestResourceId.RESOURCE2;
		Object dimensionId = "DimensionId";
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_5;
		PropertyDefinition compartmentPropertyDefinition = PropertyDefinition	.builder()//
																				.setType(Double.class)//
																				.setDefaultValue(1.3)//
																				.build();
		CompartmentPropertyId compartmentPropertyId = TestCompartmentId.COMPARTMENT_5.getCompartmentPropertyId(0);

		/*
		 * precondition: if the person id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(materialsProducerResourceId);
		experimentBuilder.addMaterialsProducerResourceLevel(null, materialsProducerResourceId, 2345L);
		experimentBuilder.covaryMaterialsProducerResource(null, materialsProducerResourceId, dimensionId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_MATERIALS_PRODUCER_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the person id is unknown
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(materialsProducerResourceId);
		experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, materialsProducerResourceId, 2345L);
		experimentBuilder.covaryMaterialsProducerResource(materialsProducerId, materialsProducerResourceId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_MATERIALS_PRODUCER_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the resource id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(materialsProducerResourceId);
		experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, null, 234L);
		experimentBuilder.covaryMaterialsProducerResource(materialsProducerId, null, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the resource id is unknown
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, materialsProducerResourceId, 234L);
		experimentBuilder.covaryMaterialsProducerResource(materialsProducerId, materialsProducerResourceId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_RESOURCE_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the dimension id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(materialsProducerResourceId);
		experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, materialsProducerResourceId, 234L);
		experimentBuilder.covaryMaterialsProducerResource(materialsProducerId, materialsProducerResourceId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_DIMENSION_IDENTIFIER, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if number of resource values for the person and
		 * resource does not match the number of values for all other variables
		 * joined under the given dimensionId
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, 8.7);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, 12.7);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, 7.5);
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, dimensionId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(materialsProducerResourceId);
		experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, materialsProducerResourceId, 45L);
		experimentBuilder.covaryMaterialsProducerResource(materialsProducerId, materialsProducerResourceId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.EXPERIMENT_VARIABLE_SIZE_MISMATCH, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the materials producer resource was previously
		 * declared as covariant
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(materialsProducerResourceId);
		experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, materialsProducerResourceId, 45L);
		experimentBuilder.covaryMaterialsProducerResource(materialsProducerId, materialsProducerResourceId, dimensionId);
		experimentBuilder.covaryMaterialsProducerResource(materialsProducerId, materialsProducerResourceId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_COVARIANT_DECLARATION, scenarioException.getScenarioErrorType());

		// postcondition tests
		/*
		 * Build a list of scenarios using variant values for two global
		 * properties,one compartment property and one materials producer
		 * resource level. Covary the compartment property values with the
		 * materials producer resource levels.
		 */
		Set<Object> compartmentPropertyValues = generatePropertyValues(compartmentPropertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		Set<Long> materialsProducerResourceLevels = generateResourceLevels(TEST_DIMENSION_VALUE_COUNT);

		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		for (Object compartmentPropertyValue : compartmentPropertyValues) {
			experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, compartmentPropertyValue);
		}
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, dimensionId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(materialsProducerResourceId);
		for (Long materialsProducerResourceLevel : materialsProducerResourceLevels) {
			experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, materialsProducerResourceId, materialsProducerResourceLevel);
		}
		experimentBuilder.covaryMaterialsProducerResource(materialsProducerId, materialsProducerResourceId, dimensionId);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());

		/*
		 * Build an ExperimentTestSpace that reflects our expectations of the
		 * the dimensions and values within the experiment space.
		 */
		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestDimensionBuilder experimentTestDimensionBuilder = new ExperimentTestDimensionBuilder();
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		for (Object compartmentPropertyValue : compartmentPropertyValues) {
			experimentTestVariableBuilder.addValue(compartmentPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getCompartmentPropertyValue(compartmentId, compartmentPropertyId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		for (Long materialsProducerResourceLevel : materialsProducerResourceLevels) {
			experimentTestVariableBuilder.addValue(materialsProducerResourceLevel);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getMaterialsProducerResourceLevel(materialsProducerId, materialsProducerResourceId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());
		experimentTestSpaceBuilder.addExperimentDimension(experimentTestDimensionBuilder.build());

		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		/*
		 * Show that the list of scenarios matches our expectations on the
		 * details of the experiment space
		 */
		experimentTestSpace.assertEqualSpaces(scenarios);
	}

	/**
	 * Test for
	 * {@link ExperimentBuilder#covaryRegionProperty(RegionId, RegionPropertyId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "covaryRegionProperty", args = { RegionId.class, RegionPropertyId.class, Object.class })
	public void testCovaryRegionProperty() {
		refreshRandomGenerator(45);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		RegionId regionId = TestRegionId.REGION_2;
		RegionPropertyId regionPropertyId = TestRegionPropertyId.REGION_PROPERTY_3;
		Object dimensionId = "DimensionId";
		PropertyDefinition regionPropertyDefinition = PropertyDefinition.builder()//
																		.setType(Integer.class)//
																		.setDefaultValue(4123)//
																		.build();

		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_1;
		CompartmentPropertyId compartmentPropertyId = TestCompartmentId.COMPARTMENT_1.getCompartmentPropertyId(0);
		PropertyDefinition compartmentPropertyDefinition = PropertyDefinition	.builder()//
																				.setType(String.class)//
																				.setDefaultValue("default")//
																				.build();

		/* precondition: if the region id is null */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineRegionProperty(regionPropertyId, regionPropertyDefinition);
		experimentBuilder.addRegionPropertyValue(null, regionPropertyId, generatePropertyValue(regionPropertyDefinition));
		experimentBuilder.covaryRegionProperty(null, regionPropertyId, dimensionId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_REGION_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the region id is unknown
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineRegionProperty(regionPropertyId, regionPropertyDefinition);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, generatePropertyValue(regionPropertyDefinition));
		experimentBuilder.covaryRegionProperty(regionId, regionPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_REGION_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the property id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineRegionProperty(regionPropertyId, regionPropertyDefinition);
		experimentBuilder.addRegionPropertyValue(regionId, null, generatePropertyValue(regionPropertyDefinition));
		experimentBuilder.covaryRegionProperty(regionId, null, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_REGION_PROPERTY_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the property id is unknown
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, generatePropertyValue(regionPropertyDefinition));
		experimentBuilder.covaryRegionProperty(regionId, regionPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_REGION_PROPERTY_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the dimension id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineRegionProperty(regionPropertyId, regionPropertyDefinition);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, generatePropertyValue(regionPropertyDefinition));
		experimentBuilder.covaryRegionProperty(regionId, regionPropertyId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_DIMENSION_IDENTIFIER, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if number of property values for the region and
		 * property does not match the number of values for all other variables
		 * joined under the given dimensionId
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, "a");
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, "b");
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, 1);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, 2);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, 3);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, 4);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, 5);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, dimensionId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineRegionProperty(regionPropertyId, regionPropertyDefinition);
		experimentBuilder.covaryRegionProperty(regionId, regionPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.EXPERIMENT_VARIABLE_SIZE_MISMATCH, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the region property was previously declared as
		 * covariant
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineRegionProperty(regionPropertyId, regionPropertyDefinition);
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, generatePropertyValue(regionPropertyDefinition));
		experimentBuilder.covaryRegionProperty(regionId, regionPropertyId, dimensionId);
		experimentBuilder.covaryRegionProperty(regionId, regionPropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_COVARIANT_DECLARATION, scenarioException.getScenarioErrorType());

		// postcondition tests
		/*
		 * Build a list of scenarios using variant values for two global
		 * properties,one compartment property and one region property. Covary
		 * the compartment property values with the region property values.
		 */
		Set<Object> regionPropertyValues = generatePropertyValues(regionPropertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		Set<Object> compartmentPropertyValues = generatePropertyValues(compartmentPropertyDefinition, TEST_DIMENSION_VALUE_COUNT);

		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineRegionProperty(regionPropertyId, regionPropertyDefinition);
		for (Object regionPropertyValue : regionPropertyValues) {
			experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, regionPropertyValue);
		}
		experimentBuilder.covaryRegionProperty(regionId, regionPropertyId, dimensionId);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		for (Object compartmentPropertyValue : compartmentPropertyValues) {
			experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, compartmentPropertyValue);
		}
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, dimensionId);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());

		/*
		 * Build an ExperimentTestSpace that reflects our expectations of the
		 * the dimensions and values within the experiment space.
		 */
		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestDimensionBuilder experimentTestDimensionBuilder = new ExperimentTestDimensionBuilder();
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		for (Object regionPropertyValue : regionPropertyValues) {
			experimentTestVariableBuilder.addValue(regionPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getRegionPropertyValue(regionId, regionPropertyId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		for (Object compartmentPropertyValue : compartmentPropertyValues) {
			experimentTestVariableBuilder.addValue(compartmentPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getCompartmentPropertyValue(compartmentId, compartmentPropertyId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());
		experimentTestSpaceBuilder.addExperimentDimension(experimentTestDimensionBuilder.build());
		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		/*
		 * Show that the list of scenarios matches our expectations on the
		 * details of the experiment space
		 */
		experimentTestSpace.assertEqualSpaces(scenarios);

	}

	/**
	 * Test for
	 * {@link ExperimentBuilder#covaryRegionResource(RegionId, ResourceId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "covaryRegionResource", args = { RegionId.class, ResourceId.class, Object.class })
	public void testCovaryRegionResource() {
		refreshRandomGenerator(46);

		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		RegionId regionId = TestRegionId.REGION_3;
		ResourceId regionResourceId = XTestResourceId.RESOURCE4;
		Object dimensionId = "DimensionId";
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_5;
		CompartmentPropertyId compartmentPropertyId = TestCompartmentId.COMPARTMENT_5.getCompartmentPropertyId(0);
		PropertyDefinition compartmentPropertyDefinition = PropertyDefinition	.builder()//
																				.setType(Integer.class)//
																				.setDefaultValue(234)//
																				.build();

		/* precondition: if the region id is null */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(regionResourceId);
		experimentBuilder.addRegionResourceLevel(null, regionResourceId, 45L);
		experimentBuilder.covaryRegionResource(null, regionResourceId, dimensionId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_REGION_ID, scenarioException.getScenarioErrorType());

		/* precondition: if the region id is unknown */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(regionResourceId);
		experimentBuilder.addRegionResourceLevel(regionId, regionResourceId, 345L);
		experimentBuilder.covaryRegionResource(regionId, regionResourceId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_REGION_ID, scenarioException.getScenarioErrorType());

		/* precondition: if the resource id is null */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(regionResourceId);
		experimentBuilder.addRegionResourceLevel(regionId, null, 345L);
		experimentBuilder.covaryRegionResource(regionId, null, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the resource id is unknown
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addRegionResourceLevel(regionId, regionResourceId, 345L);
		experimentBuilder.covaryRegionResource(regionId, regionResourceId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_RESOURCE_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the dimension id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(regionResourceId);
		experimentBuilder.addRegionResourceLevel(regionId, regionResourceId, 234L);
		experimentBuilder.covaryRegionResource(regionId, regionResourceId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_DIMENSION_IDENTIFIER, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if number of resource values for the region and
		 * resource does not match the number of values for all other variables
		 * joined under the given dimensionId
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, dimensionId);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, 23);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, 334);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, 6244);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(regionResourceId);
		experimentBuilder.addRegionResourceLevel(regionId, regionResourceId, 100L);
		experimentBuilder.addRegionResourceLevel(regionId, regionResourceId, 234100L);
		experimentBuilder.covaryRegionResource(regionId, regionResourceId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.EXPERIMENT_VARIABLE_SIZE_MISMATCH, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the region resource was previously declared as
		 * covariant
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(regionResourceId);
		experimentBuilder.addRegionResourceLevel(regionId, regionResourceId, 234L);
		experimentBuilder.covaryRegionResource(regionId, regionResourceId, dimensionId);
		experimentBuilder.covaryRegionResource(regionId, regionResourceId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_COVARIANT_DECLARATION, scenarioException.getScenarioErrorType());

		// postcondition tests

		/*
		 * Build a list of scenarios using variant values for two global
		 * properties,one compartment property and one region resource. Covary
		 * the compartment property values with the region resource levels.
		 */
		Set<Object> compartmentPropertyValues = generatePropertyValues(compartmentPropertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		Set<Long> regionResourceLevels = generateResourceLevels(TEST_DIMENSION_VALUE_COUNT);
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		for (Object compartmentPropertyValue : compartmentPropertyValues) {
			experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, compartmentPropertyValue);
		}
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, dimensionId);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(regionResourceId);
		for (Long regionResourceLevel : regionResourceLevels) {
			experimentBuilder.addRegionResourceLevel(regionId, regionResourceId, regionResourceLevel);
		}
		experimentBuilder.covaryRegionResource(regionId, regionResourceId, dimensionId);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());

		/*
		 * Build an ExperimentTestSpace that reflects our expectations of the
		 * the dimensions and values within the experiment space.
		 */
		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);
		ExperimentTestDimensionBuilder experimentTestDimensionBuilder = new ExperimentTestDimensionBuilder();
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		for (Object compartmentPropertyValue : compartmentPropertyValues) {
			experimentTestVariableBuilder.addValue(compartmentPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getCompartmentPropertyValue(compartmentId, compartmentPropertyId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());

		for (Long regionResourceLevel : regionResourceLevels) {
			experimentTestVariableBuilder.addValue(regionResourceLevel);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getRegionResourceLevel(regionId, regionResourceId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());
		experimentTestSpaceBuilder.addExperimentDimension(experimentTestDimensionBuilder.build());
		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();
		/*
		 * 
		 * Show that the list of scenarios matches our expectations on the
		 * details of the experiment space
		 */
		experimentTestSpace.assertEqualSpaces(scenarios);

	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#covaryResourceProperty(ResourceId, ResourcePropertyId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "covaryResourceProperty", args = { ResourceId.class, ResourcePropertyId.class, Object.class })
	public void testCovaryResourceProperty() {
		refreshRandomGenerator(47);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		ResourceId resourceId = XTestResourceId.RESOURCE4;
		ResourcePropertyId resourcePropertyId = XTestResourceId.RESOURCE4.getResourcePropertyIds()[0];
		Object dimensionId = "DimensionId";
		PropertyDefinition resourcePropertyDefinition = PropertyDefinition	.builder()//
																			.setType(Integer.class)//
																			.setDefaultValue(3456)//
																			.build();
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_2;
		CompartmentPropertyId compartmentPropertyId = TestCompartmentId.COMPARTMENT_2.getCompartmentPropertyId(0);
		PropertyDefinition compartmentPropertyDefinition = PropertyDefinition	.builder()//
																				.setType(String.class)//
																				.setDefaultValue("default")//
																				.build();

		/*
		 * precondition: if the resource id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, resourcePropertyDefinition);
		experimentBuilder.addResourcePropertyValue(null, resourcePropertyId, generatePropertyValue(resourcePropertyDefinition));
		experimentBuilder.covaryResourceProperty(null, resourcePropertyId, dimensionId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_ID, scenarioException.getScenarioErrorType());

		/* precondition: if the resource id is unknown */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, resourcePropertyDefinition);
		experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, generatePropertyValue(resourcePropertyDefinition));
		experimentBuilder.covaryResourceProperty(resourceId, resourcePropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_RESOURCE_ID, scenarioException.getScenarioErrorType());

		/* precondition: if the property id is null */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, resourcePropertyDefinition);
		experimentBuilder.addResourcePropertyValue(resourceId, null, generatePropertyValue(resourcePropertyDefinition));
		experimentBuilder.covaryResourceProperty(resourceId, null, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RESOURCE_PROPERTY_ID, scenarioException.getScenarioErrorType());

		/* precondition: if the property id is unknown */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, generatePropertyValue(resourcePropertyDefinition));
		experimentBuilder.covaryResourceProperty(resourceId, resourcePropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.UNKNOWN_RESOURCE_PROPERTY_ID, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the dimension id is null
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, resourcePropertyDefinition);
		experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, generatePropertyValue(resourcePropertyDefinition));
		experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, generatePropertyValue(resourcePropertyDefinition));
		experimentBuilder.covaryResourceProperty(resourceId, resourcePropertyId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_DIMENSION_IDENTIFIER, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if number of property values for the resource and
		 * property does not match the number of values for all other variables
		 * joined under the given dimensionId
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, "a");
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, "b");
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, dimensionId);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, resourcePropertyDefinition);
		experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, generatePropertyValue(resourcePropertyDefinition));
		experimentBuilder.covaryResourceProperty(resourceId, resourcePropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.EXPERIMENT_VARIABLE_SIZE_MISMATCH, scenarioException.getScenarioErrorType());

		/*
		 * precondition: if the resource property was previously declared as
		 * covariant
		 */
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, resourcePropertyDefinition);
		experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, generatePropertyValue(resourcePropertyDefinition));
		experimentBuilder.covaryResourceProperty(resourceId, resourcePropertyId, dimensionId);
		experimentBuilder.covaryResourceProperty(resourceId, resourcePropertyId, dimensionId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.DUPLICATE_EXPERIMENT_COVARIANT_DECLARATION, scenarioException.getScenarioErrorType());

		// postcondition tests
		/*
		 * Build a list of scenarios using variant values for two global
		 * properties,one compartment property and one resource property. Covary
		 * the compartment property values with the resource property values.
		 */
		Set<Object> resourcePropertyValues = generatePropertyValues(resourcePropertyDefinition, TEST_DIMENSION_VALUE_COUNT);
		Set<Object> compartmentPropertyValues = generatePropertyValues(compartmentPropertyDefinition, TEST_DIMENSION_VALUE_COUNT);

		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, resourcePropertyDefinition);
		experimentBuilder.covaryResourceProperty(resourceId, resourcePropertyId, dimensionId);
		for (Object resourcePropertyValue : resourcePropertyValues) {
			experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, resourcePropertyValue);
		}
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, compartmentPropertyDefinition);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		for (Object compartmentPropertyValue : compartmentPropertyValues) {
			experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, compartmentPropertyValue);
		}
		experimentBuilder.covaryCompartmentProperty(compartmentId, compartmentPropertyId, dimensionId);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());

		/*
		 * Build an ExperimentTestSpace that reflects our expectations of the
		 * the dimensions and values within the experiment space.
		 */
		ExperimentTestSpaceBuilder experimentTestSpaceBuilder = new ExperimentTestSpaceBuilder();
		fillWithVariantGlobalProperties(experimentTestSpaceBuilder);

		ExperimentTestDimensionBuilder experimentTestDimensionBuilder = new ExperimentTestDimensionBuilder();
		ExperimentTestVariableBuilder experimentTestVariableBuilder = new ExperimentTestVariableBuilder();
		for (Object resourcePropertyValue : resourcePropertyValues) {
			experimentTestVariableBuilder.addValue(resourcePropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getResourcePropertyValue(resourceId, resourcePropertyId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());
		for (Object compartmentPropertyValue : compartmentPropertyValues) {
			experimentTestVariableBuilder.addValue(compartmentPropertyValue);
		}
		experimentTestVariableBuilder.setValueExtractor((scenario) -> scenario.getCompartmentPropertyValue(compartmentId, compartmentPropertyId));
		experimentTestDimensionBuilder.addExperimentVariable(experimentTestVariableBuilder.build());
		experimentTestSpaceBuilder.addExperimentDimension(experimentTestDimensionBuilder.build());
		ExperimentTestSpace experimentTestSpace = experimentTestSpaceBuilder.build();

		/*
		 * 
		 * Show that the list of scenarios matches our expectations on the
		 * details of the experiment space
		 */
		experimentTestSpace.assertEqualSpaces(scenarios);

	}

	private ExperimentBuilder getComplexScenaroFactory(long seed) {
		revertRandomGenerator(seed);
		ExperimentBuilder result = new ExperimentBuilder();
		for (TestGlobalPropertyId testGlobalPropertyId : TestGlobalPropertyId.values()) {
			PropertyDefinition propertyDefinition = generateRandomNonBooleanPropertyDefinition();
			result.defineGlobalProperty(testGlobalPropertyId, propertyDefinition);
			for (Object propertyValue : generatePropertyValues(propertyDefinition, 2)) {
				result.addGlobalPropertyValue(testGlobalPropertyId, propertyValue);
			}
		}

		for (TestCompartmentId testCompartmentId : TestCompartmentId.values()) {
			result.addCompartmentId(testCompartmentId, () -> new PlaceholderComponent()::init);
		}
		for (TestCompartmentId testCompartmentId : TestCompartmentId.values()) {
			for (CompartmentPropertyId compartmentPropertyId : testCompartmentId.getCompartmentPropertyIds()) {
				PropertyDefinition propertyDefinition = generateRandomPropertyDefinition();
				result.defineCompartmentProperty(testCompartmentId, compartmentPropertyId, propertyDefinition);
				Object propertyValue = generatePropertyValue(propertyDefinition);
				result.addCompartmentPropertyValue(testCompartmentId, compartmentPropertyId, propertyValue);
			}
		}

		return result;
	}

	/**
	 * Test {@link ExperimentBuilder#ExperimentBuilder()}
	 */
	@Test
	@UnitTestConstructor(args = {})
	public void testConstructor() {
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();
		assertNotNull(experimentBuilder);
	}

	/**
	 * Test {@link ExperimentBuilder#build()}
	 */
	@Test
	@UnitTestMethod(name = "build", args = {})
	public void testBuild() {
		refreshRandomGenerator(48);

		/*
		 * Generate some scenarios
		 */
		ExperimentBuilder scenaroFactory = getComplexScenaroFactory(RANDOM_GENERATOR.nextLong());
		List<Scenario> scenarios = getScenarios(scenaroFactory.build());

		/*
		 * Show that we have a sufficient number of scenarios
		 */
		assertTrue(scenarios.size() > 100);

		/*
		 * Testing of the content of each scenario is implicitly covered by all
		 * the other tests in this test class.
		 */
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#forceBatchPropertyExperimentColumn(BatchId, BatchPropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "forceBatchPropertyExperimentColumn", args = { BatchId.class, BatchPropertyId.class })
	public void testForceBatchPropertyExperimentColumn() {
		refreshRandomGenerator(49);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		BatchId batchId = new BatchId(15);
		BatchId badBatchId = new BatchId(20);
		BatchPropertyId batchPropertyId = XTestMaterialId.MATERIAL_3.getBatchPropertyIds()[0];
		BatchPropertyId badBatchPropertyId = XTestMaterialId.MATERIAL_3.getBatchPropertyIds()[1];
		PropertyDefinition propertyDefinition = generateRandomPropertyDefinition();
		Object propertyValue = generatePropertyValue(propertyDefinition);
		MaterialId materialId = XTestMaterialId.MATERIAL_3;
		double amount = 2341456;
		MaterialsProducerId materialsProducerId = XTestMaterialsProducerId.MATERIALS_PRODUCER_1;

		// precondition: if the batch id is null

		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, propertyValue);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.forceBatchPropertyExperimentColumn(null, batchPropertyId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the batch id is not recognized
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, propertyValue);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.forceBatchPropertyExperimentColumn(badBatchId, batchPropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the batch property id is null
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, propertyValue);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.forceBatchPropertyExperimentColumn(batchId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the batch property id is not recognized
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, propertyValue);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.forceBatchPropertyExperimentColumn(batchId, badBatchPropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// postcondition: the experiment contains the expected column
		experimentBuilder.addBatchPropertyValue(batchId, batchPropertyId, propertyValue);
		experimentBuilder.defineBatchProperty(materialId, batchPropertyId, propertyDefinition);
		experimentBuilder.addMaterial(materialId);
		experimentBuilder.addBatch(batchId, materialId, amount, materialsProducerId);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.forceBatchPropertyExperimentColumn(batchId, batchPropertyId);
		Experiment experiment = experimentBuilder.build();

		String expected = "batch_property_value_assignment.15.TestBatchPropertyId [id=BProp_3_1]";
		String actual = experiment.getExperimentFieldName(0);
		assertEquals(expected, actual);

	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#forceCompartmentPropertyExperimentColumn(CompartmentId, CompartmentPropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "forceCompartmentPropertyExperimentColumn", args = { CompartmentId.class, CompartmentPropertyId.class })
	public void testForceCompartmentPropertyExperimentColumn() {
		refreshRandomGenerator(50);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_1;
		CompartmentId badCompartmentId = TestCompartmentId.COMPARTMENT_2;
		CompartmentPropertyId compartmentPropertyId = TestCompartmentId.COMPARTMENT_1.getCompartmentPropertyId(0);
		CompartmentPropertyId badCompartmentPropertyId = TestCompartmentId.COMPARTMENT_1.getCompartmentPropertyId(1);
		PropertyDefinition propertyDefinition = generateRandomPropertyDefinition();
		Object propertyValue = generatePropertyValue(propertyDefinition);

		// precondition: if the compartment id is null
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, propertyValue);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, propertyDefinition);
		experimentBuilder.forceCompartmentPropertyExperimentColumn(null, compartmentPropertyId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the compartment id is unknown
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, propertyValue);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, propertyDefinition);
		experimentBuilder.forceCompartmentPropertyExperimentColumn(badCompartmentId, compartmentPropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the compartment property id is null
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, propertyValue);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, propertyDefinition);
		experimentBuilder.forceCompartmentPropertyExperimentColumn(compartmentId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the compartment property id is unknown
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, propertyValue);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, propertyDefinition);
		experimentBuilder.forceCompartmentPropertyExperimentColumn(compartmentId, badCompartmentPropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// postcondition: the experiment contains the expected column
		experimentBuilder.addCompartmentPropertyValue(compartmentId, compartmentPropertyId, propertyValue);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineCompartmentProperty(compartmentId, compartmentPropertyId, propertyDefinition);
		experimentBuilder.forceCompartmentPropertyExperimentColumn(compartmentId, compartmentPropertyId);
		Experiment experiment = experimentBuilder.build();
		String expected = "compartment_property.COMPARTMENT_1.TestCompartmentPropertyId [id=Compartment_Property_1_1]";
		String actual = experiment.getExperimentFieldName(0);
		assertEquals(expected, actual);

	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#addRandomNumberGeneratorId(RandomNumberGeneratorId)}
	 */
	@Test
	@UnitTestMethod(name = "addRandomNumberGeneratorId", args = { RandomNumberGeneratorId.class })
	public void testAddRandomNumberGeneratorId() {
		refreshRandomGenerator(51);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		// precondition: if the randomNumberGeneratorId is null
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRandomNumberGeneratorId(null);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.NULL_RANDOM_NUMBER_GENERATOR_ID, scenarioException.getScenarioErrorType());

		// precondition: if the randomNumberGeneratorId was previously added
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRandomNumberGeneratorId(TestRandomGeneratorId.BLITZEN);
		experimentBuilder.addRandomNumberGeneratorId(TestRandomGeneratorId.BLITZEN);
		scenarioException = assertThrows(ScenarioException.class, () -> experimentBuilder.build());
		assertEquals(ScenarioErrorType.PREVIOUSLY_ASSIGNED_VALUE, scenarioException.getScenarioErrorType());

		// postcondition: all the scenarios contain the expected
		// randomNumberGenerator Ids
		fillWithVariantGlobalProperties(experimentBuilder);
		experimentBuilder.addRandomNumberGeneratorId(TestRandomGeneratorId.BLITZEN);
		experimentBuilder.addRandomNumberGeneratorId(TestRandomGeneratorId.CUPID);
		List<Scenario> scenarios = getScenarios(experimentBuilder.build());
		assertTrue(scenarios.size() > 0);
		for (Scenario scenario : scenarios) {
			assertEquals(2, scenario.getRandomNumberGeneratorIds().size());
			assertTrue(scenario.getRandomNumberGeneratorIds().contains(TestRandomGeneratorId.BLITZEN));
			assertTrue(scenario.getRandomNumberGeneratorIds().contains(TestRandomGeneratorId.CUPID));
		}
	}

	

	/**
	 * Tests
	 * {@link ExperimentBuilder#forceGlobalPropertyExperimentColumn(GlobalPropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "forceGlobalPropertyExperimentColumn", args = { GlobalPropertyId.class })
	public void testForceGlobalPropertyExperimentColumn() {
		refreshRandomGenerator(53);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		GlobalPropertyId globalPropertyId = TestGlobalPropertyId.Global_Property_1;
		GlobalPropertyId badGlobalPropertyId = TestGlobalPropertyId.Global_Property_2;
		PropertyDefinition propertyDefinition = generateRandomPropertyDefinition();
		Object propertyValue = generatePropertyValue(propertyDefinition);

		// precondition: if the global property id is null
		experimentBuilder.addGlobalPropertyValue(globalPropertyId, propertyValue);
		experimentBuilder.defineGlobalProperty(globalPropertyId, propertyDefinition);
		experimentBuilder.forceGlobalPropertyExperimentColumn(null);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the global property id is unknown
		experimentBuilder.addGlobalPropertyValue(globalPropertyId, propertyValue);
		experimentBuilder.defineGlobalProperty(globalPropertyId, propertyDefinition);
		experimentBuilder.forceGlobalPropertyExperimentColumn(badGlobalPropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// postcondition: the experiment contains the expected column
		experimentBuilder.addGlobalPropertyValue(globalPropertyId, propertyValue);
		experimentBuilder.defineGlobalProperty(globalPropertyId, propertyDefinition);
		experimentBuilder.forceGlobalPropertyExperimentColumn(globalPropertyId);
		Experiment experiment = experimentBuilder.build();
		String expected = "global_property.Global_Property_1";
		String actual = experiment.getExperimentFieldName(0);
		assertEquals(expected, actual);

	}


	/**
	 * Tests {@link ExperimentBuilder#setBaseScenarioId(int)}
	 */
	@Test
	@UnitTestMethod(name = "setBaseScenarioId", args = { int.class })
	public void testSetBaseScenarioId() {
		refreshRandomGenerator(55);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		// postcondition: all scenarios contain the suggested population size
		fillWithVariantGlobalProperties(experimentBuilder);
		int baseScenarioNumber = 1000;
		experimentBuilder.setBaseScenarioId(baseScenarioNumber);
		Experiment experiment = experimentBuilder.build();
		List<Scenario> scenarios = getScenarios(experiment);
		assertTrue(scenarios.size() > 0);
		Set<ScenarioId> expectedScenarioIds = new LinkedHashSet<>();
		for (int i = 0; i < scenarios.size(); i++) {
			expectedScenarioIds.add(new ScenarioId(++baseScenarioNumber));
		}

		Set<ScenarioId> actualScenarioIds = new LinkedHashSet<>();
		for (int i = 0; i < experiment.getScenarioCount(); i++) {
			actualScenarioIds.add(experiment.getScenarioId(i));
		}

		assertEquals(expectedScenarioIds, actualScenarioIds);
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#forceGroupPropertyExperimentColumn(GroupId, GroupPropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "forceGroupPropertyExperimentColumn", args = { GroupId.class, GroupPropertyId.class })
	public void testForceGroupPropertyExperimentColumn() {
		refreshRandomGenerator(56);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		GroupId groupId = new GroupId(10);
		GroupId badGroupId = new GroupId(11);
		GroupTypeId groupTypeId = XTestGroupTypeId.GROUP_TYPE_1;
		GroupPropertyId groupPropertyId = XTestGroupTypeId.GROUP_TYPE_1.getGroupPropertyIds()[0];
		GroupPropertyId badGroupPropertyId = XTestGroupTypeId.GROUP_TYPE_1.getGroupPropertyIds()[1];
		PropertyDefinition propertyDefinition = generateRandomPropertyDefinition();
		Object propertyValue = generatePropertyValue(propertyDefinition);

		// precondition: if the group id is null
		experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, propertyValue);
		experimentBuilder.defineGroupProperty(groupTypeId, badGroupPropertyId, propertyDefinition);
		experimentBuilder.forceGroupPropertyExperimentColumn(null, groupPropertyId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the group id is unknown
		experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, propertyValue);
		experimentBuilder.defineGroupProperty(groupTypeId, badGroupPropertyId, propertyDefinition);
		experimentBuilder.forceGroupPropertyExperimentColumn(badGroupId, groupPropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the group property id is null
		experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, propertyValue);
		experimentBuilder.defineGroupProperty(groupTypeId, badGroupPropertyId, propertyDefinition);
		experimentBuilder.forceGroupPropertyExperimentColumn(groupId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the group property id is unknown
		experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, propertyValue);
		experimentBuilder.defineGroupProperty(groupTypeId, badGroupPropertyId, propertyDefinition);
		experimentBuilder.forceGroupPropertyExperimentColumn(groupId, badGroupPropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if there are no values
		experimentBuilder.defineGroupProperty(groupTypeId, badGroupPropertyId, propertyDefinition);
		experimentBuilder.forceGroupPropertyExperimentColumn(groupId, badGroupPropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// postcondition: the experiment contains the expected column
		experimentBuilder.addGroupPropertyValue(groupId, groupPropertyId, propertyValue);
		experimentBuilder.defineGroupProperty(groupTypeId, badGroupPropertyId, propertyDefinition);
		experimentBuilder.forceGroupPropertyExperimentColumn(groupId, groupPropertyId);

		Experiment experiment = experimentBuilder.build();
		String expected = "group_property_value_assignment.10.TestGroupPropertyId [id=GTProp_1_1]";
		String actual = experiment.getExperimentFieldName(0);
		assertEquals(expected, actual);
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#forceResourcePropertyExperimentColumn(ResourceId, ResourcePropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "forceResourcePropertyExperimentColumn", args = { ResourceId.class, ResourcePropertyId.class })
	public void testForceResourcePropertyExperimentColumn() {
		refreshRandomGenerator(58);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		ResourceId resourceId = XTestResourceId.RESOURCE1;
		ResourceId badResourceId = XTestResourceId.RESOURCE2;
		ResourcePropertyId resourcePropertyId = XTestResourceId.RESOURCE8.getResourcePropertyIds()[0];
		ResourcePropertyId badResourcePropertyId = XTestResourceId.RESOURCE8.getResourcePropertyIds()[1];
		PropertyDefinition propertyDefinition = generateRandomPropertyDefinition();
		Object propertyValue = generatePropertyValue(propertyDefinition);

		// precondition: if the resource id is null
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, propertyDefinition);
		experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, propertyValue);
		experimentBuilder.forceResourcePropertyExperimentColumn(null, resourcePropertyId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the resource id is unknown
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, propertyDefinition);
		experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, propertyValue);
		experimentBuilder.forceResourcePropertyExperimentColumn(badResourceId, resourcePropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the resource property id is null
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, propertyDefinition);
		experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, propertyValue);
		experimentBuilder.forceResourcePropertyExperimentColumn(resourceId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the resource property id is unknown
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, propertyDefinition);
		experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, propertyValue);
		experimentBuilder.forceResourcePropertyExperimentColumn(resourceId, badResourcePropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if there are no values for the column
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, propertyDefinition);
		// experimentBuilder.addResourcePropertyValue(resourceId,
		// resourcePropertyId, propertyValue);
		experimentBuilder.forceResourcePropertyExperimentColumn(resourceId, resourcePropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// postcondition: the experiment contains the expected column
		experimentBuilder.addResource(resourceId);
		experimentBuilder.defineResourceProperty(resourceId, resourcePropertyId, propertyDefinition);
		experimentBuilder.addResourcePropertyValue(resourceId, resourcePropertyId, propertyValue);
		experimentBuilder.forceResourcePropertyExperimentColumn(resourceId, resourcePropertyId);

		Experiment experiment = experimentBuilder.build();
		String expected = "resource_property.RESOURCE1.TestResourcePropertyId [id=ResourceProperty_8_1]";
		String actual = experiment.getExperimentFieldName(0);
		assertEquals(expected, actual);
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#forceRegionResourceExperimentColumn(RegionId, ResourceId)}
	 */
	@Test
	@UnitTestMethod(name = "forceRegionResourceExperimentColumn", args = { RegionId.class, ResourceId.class })
	public void testForceRegionResourceExperimentColumn() {
		refreshRandomGenerator(59);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		RegionId regionId = TestRegionId.REGION_1;
		RegionId badRegionId = TestRegionId.REGION_2;
		ResourceId resourceId = XTestResourceId.RESOURCE1;
		ResourceId badResourceId = XTestResourceId.RESOURCE2;

		// precondition: if the region id is null
		experimentBuilder.addRegionResourceLevel(regionId, resourceId, 100);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forceRegionResourceExperimentColumn(null, resourceId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the region id is unknown
		experimentBuilder.addRegionResourceLevel(regionId, resourceId, 100);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forceRegionResourceExperimentColumn(badRegionId, resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the resource id is null
		experimentBuilder.addRegionResourceLevel(regionId, resourceId, 100);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forceRegionResourceExperimentColumn(regionId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the resource id is unknown
		experimentBuilder.addRegionResourceLevel(regionId, resourceId, 100);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forceRegionResourceExperimentColumn(regionId, badResourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if there are no values for the column
		// experimentBuilder.addRegionResourceLevel(regionId, resourceId, 100);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forceRegionResourceExperimentColumn(regionId, resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// postcondition: the experiment contains the expected column
		experimentBuilder.addRegionResourceLevel(regionId, resourceId, 100);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forceRegionResourceExperimentColumn(regionId, resourceId);

		Experiment experiment = experimentBuilder.build();
		String expected = "region_resource.REGION_1.RESOURCE1";
		String actual = experiment.getExperimentFieldName(0);
		assertEquals(expected, actual);
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#forceRegionPropertyExperimentColumn(RegionId, RegionPropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "forceRegionPropertyExperimentColumn", args = { RegionId.class, RegionPropertyId.class })
	public void testForceRegionPropertyExperimentColumn() {
		refreshRandomGenerator(60);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		RegionId regionId = TestRegionId.REGION_1;
		RegionId badRegionId = TestRegionId.REGION_2;
		RegionPropertyId regionPropertyId = TestRegionPropertyId.REGION_PROPERTY_7;
		RegionPropertyId badRegionPropertyId = TestRegionPropertyId.REGION_PROPERTY_8;
		PropertyDefinition propertyDefinition = generateRandomPropertyDefinition();
		Object propertyValue = generatePropertyValue(propertyDefinition);

		// precondition: if the region id is null
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, propertyValue);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineRegionProperty(regionPropertyId, propertyDefinition);
		experimentBuilder.forceRegionPropertyExperimentColumn(null, regionPropertyId);

		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the region id is unknown
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, propertyValue);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineRegionProperty(regionPropertyId, propertyDefinition);
		experimentBuilder.forceRegionPropertyExperimentColumn(badRegionId, regionPropertyId);

		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the region property id is null
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, propertyValue);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineRegionProperty(regionPropertyId, propertyDefinition);
		experimentBuilder.forceRegionPropertyExperimentColumn(regionId, null);

		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the region property id is unknown
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, propertyValue);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineRegionProperty(regionPropertyId, propertyDefinition);
		experimentBuilder.forceRegionPropertyExperimentColumn(regionId, badRegionPropertyId);

		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if there are no values for the column
		// experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId,
		// propertyValue);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineRegionProperty(regionPropertyId, propertyDefinition);
		experimentBuilder.forceRegionPropertyExperimentColumn(regionId, regionPropertyId);

		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// postcondition: the experiment contains the expected column
		experimentBuilder.addRegionPropertyValue(regionId, regionPropertyId, propertyValue);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineRegionProperty(regionPropertyId, propertyDefinition);
		experimentBuilder.forceRegionPropertyExperimentColumn(regionId, regionPropertyId);
		;

		Experiment experiment = experimentBuilder.build();
		String expected = "region_property.REGION_1.REGION_PROPERTY_7";
		String actual = experiment.getExperimentFieldName(0);
		assertEquals(expected, actual);
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#forcePersonResourceExperimentColumn(PersonId, ResourceId)}
	 */
	@Test
	@UnitTestMethod(name = "forcePersonResourceExperimentColumn", args = { PersonId.class, ResourceId.class })
	public void testForcePersonResourceExperimentColumn() {
		refreshRandomGenerator(61);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		PersonId personId = new PersonId(100);
		PersonId badPersonId = new PersonId(101);

		ResourceId resourceId = XTestResourceId.RESOURCE1;
		ResourceId badResourceId = XTestResourceId.RESOURCE2;

		RegionId regionId = TestRegionId.REGION_1;
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_1;

		// precondition: if the person id is null
		experimentBuilder.addPersonResourceLevel(personId, resourceId, 75);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forcePersonResourceExperimentColumn(null, resourceId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the person id is unknown
		experimentBuilder.addPersonResourceLevel(personId, resourceId, 75);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forcePersonResourceExperimentColumn(badPersonId, resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the resource id is null
		experimentBuilder.addPersonResourceLevel(personId, resourceId, 75);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forcePersonResourceExperimentColumn(personId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the resource id is unknown
		experimentBuilder.addPersonResourceLevel(personId, resourceId, 75);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forcePersonResourceExperimentColumn(personId, badResourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if there are no values for the column resource id is
		// unknown
		// experimentBuilder.addPersonResourceLevel(personId, resourceId, 75);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forcePersonResourceExperimentColumn(personId, badResourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// postcondition: the experiment contains the expected column
		experimentBuilder.addPersonResourceLevel(personId, resourceId, 75);
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forcePersonResourceExperimentColumn(personId, resourceId);

		Experiment experiment = experimentBuilder.build();
		String expected = "person_resource.100.RESOURCE1";
		String actual = experiment.getExperimentFieldName(0);
		assertEquals(expected, actual);
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#forcePersonPropertyExperimentColumn(PersonId, PersonPropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "forcePersonPropertyExperimentColumn", args = { PersonId.class, PersonPropertyId.class })
	public void testForcePersonPropertyExperimentColumn() {
		refreshRandomGenerator(62);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		PersonId personId = new PersonId(100);
		PersonId badPersonId = new PersonId(101);
		PersonPropertyId personPropertyId = TestPersonPropertyId.PERSON_PROPERTY_1_BOOLEAN_MUTABLE_NO_TRACK;
		PersonPropertyId badPersonPropertyId = TestPersonPropertyId.PERSON_PROPERTY_2_INTEGER_MUTABLE_NO_TRACK;
		PropertyDefinition propertyDefinition = generateRandomPropertyDefinition();
		Object propertyValue = generatePropertyValue(propertyDefinition);
		RegionId regionId = TestRegionId.REGION_1;
		CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_1;

		// precondition: if the person id is null
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addPersonPropertyValue(personId, personPropertyId, propertyValue);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.definePersonProperty(personPropertyId, propertyDefinition);
		experimentBuilder.forcePersonPropertyExperimentColumn(null, personPropertyId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the person id is unknown
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addPersonPropertyValue(personId, personPropertyId, propertyValue);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.definePersonProperty(personPropertyId, propertyDefinition);
		experimentBuilder.forcePersonPropertyExperimentColumn(badPersonId, personPropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the person property id is null
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addPersonPropertyValue(personId, personPropertyId, propertyValue);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.definePersonProperty(personPropertyId, propertyDefinition);
		experimentBuilder.forcePersonPropertyExperimentColumn(personId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the person property id is unknown
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addPersonPropertyValue(personId, personPropertyId, propertyValue);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.definePersonProperty(personPropertyId, propertyDefinition);
		experimentBuilder.forcePersonPropertyExperimentColumn(personId, badPersonPropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if there are no values for the column
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		// experimentBuilder.addPersonPropertyValue(personId,personPropertyId,propertyValue);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.definePersonProperty(personPropertyId, propertyDefinition);
		experimentBuilder.forcePersonPropertyExperimentColumn(personId, personPropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// postcondition: the experiment contains the expected column
		experimentBuilder.addRegionId(regionId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addCompartmentId(compartmentId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addPersonPropertyValue(personId, personPropertyId, propertyValue);
		experimentBuilder.addPerson(personId, regionId, compartmentId);
		experimentBuilder.definePersonProperty(personPropertyId, propertyDefinition);
		experimentBuilder.forcePersonPropertyExperimentColumn(personId, personPropertyId);

		Experiment experiment = experimentBuilder.build();
		String expected = "person_property.100.PERSON_PROPERTY_1_BOOLEAN_MUTABLE_NO_TRACK";
		String actual = experiment.getExperimentFieldName(0);
		assertEquals(expected, actual);
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#forceMaterialsProducerResourceExperimentColumn(MaterialsProducerId, ResourceId)}
	 */
	@Test
	@UnitTestMethod(name = "forceMaterialsProducerResourceExperimentColumn", args = { MaterialsProducerId.class, ResourceId.class })
	public void testForceMaterialsProducerResourceExperimentColumn() {
		refreshRandomGenerator(63);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		MaterialsProducerId materialsProducerId = XTestMaterialsProducerId.MATERIALS_PRODUCER_1;
		MaterialsProducerId badMaterialsProducerId = XTestMaterialsProducerId.MATERIALS_PRODUCER_2;

		ResourceId resourceId = XTestResourceId.RESOURCE1;
		ResourceId badResourceId = XTestResourceId.RESOURCE2;

		// precondition: if the materials producer id is null
		experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, resourceId, 1000);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forceMaterialsProducerResourceExperimentColumn(null, resourceId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer id is unknown
		experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, resourceId, 1000);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forceMaterialsProducerResourceExperimentColumn(badMaterialsProducerId, resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the resource id is null
		experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, resourceId, 1000);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forceMaterialsProducerResourceExperimentColumn(materialsProducerId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the resource id is unknown
		experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, resourceId, 1000);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forceMaterialsProducerResourceExperimentColumn(materialsProducerId, badResourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if there are no values in the column
		// experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId,resourceId,1000);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forceMaterialsProducerResourceExperimentColumn(materialsProducerId, resourceId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// postcondition: the experiment contains the expected column
		experimentBuilder.addMaterialsProducerResourceLevel(materialsProducerId, resourceId, 1000);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.addResource(resourceId);
		experimentBuilder.forceMaterialsProducerResourceExperimentColumn(materialsProducerId, resourceId);

		Experiment experiment = experimentBuilder.build();
		String expected = "materials_producer_resource_assignment.MATERIALS_PRODUCER_1.RESOURCE1";
		String actual = experiment.getExperimentFieldName(0);
		assertEquals(expected, actual);
	}

	/**
	 * Tests
	 * {@link ExperimentBuilder#forceMaterialsProducerPropertyExperimentColumn(MaterialsProducerId, MaterialsProducerPropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "forceMaterialsProducerPropertyExperimentColumn", args = { MaterialsProducerId.class, MaterialsProducerPropertyId.class })
	public void testForceMaterialsProducerPropertyExperimentColumn() {
		refreshRandomGenerator(64);
		ExperimentBuilder experimentBuilder = new ExperimentBuilder();

		MaterialsProducerId materialsProducerId = XTestMaterialsProducerId.MATERIALS_PRODUCER_1;
		MaterialsProducerId badMaterialsProducerId = XTestMaterialsProducerId.MATERIALS_PRODUCER_2;
		MaterialsProducerPropertyId materialsProducerPropertyId = XTestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1;
		MaterialsProducerPropertyId badMaterialsProducerPropertyId = XTestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_2;
		PropertyDefinition propertyDefinition = generateRandomPropertyDefinition();
		Object propertyValue = generatePropertyValue(propertyDefinition);

		// precondition: if the materials producer id is null
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, propertyValue);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, propertyDefinition);
		experimentBuilder.forceMaterialsProducerPropertyExperimentColumn(null, materialsProducerPropertyId);
		ScenarioException scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer id is unknown
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, propertyValue);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, propertyDefinition);
		experimentBuilder.forceMaterialsProducerPropertyExperimentColumn(badMaterialsProducerId, materialsProducerPropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer property id is null
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, propertyValue);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, propertyDefinition);
		experimentBuilder.forceMaterialsProducerPropertyExperimentColumn(materialsProducerId, null);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if the materials producer property id is unknown
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, propertyValue);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, propertyDefinition);
		experimentBuilder.forceMaterialsProducerPropertyExperimentColumn(materialsProducerId, badMaterialsProducerPropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// precondition: if there are no values in the column
		// experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId,materialsProducerPropertyId,propertyValue);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, propertyDefinition);
		experimentBuilder.forceMaterialsProducerPropertyExperimentColumn(materialsProducerId, materialsProducerPropertyId);
		scenarioException = assertThrows(ScenarioException.class, () -> getScenarios(experimentBuilder.build()));
		assertEquals(ScenarioErrorType.COVARIANT_WITHOUT_VALUES, scenarioException.getScenarioErrorType());

		// postcondition: the experiment contains the expected column
		experimentBuilder.addMaterialsProducerPropertyValue(materialsProducerId, materialsProducerPropertyId, propertyValue);
		experimentBuilder.addMaterialsProducerId(materialsProducerId, () -> new PlaceholderComponent()::init);
		experimentBuilder.defineMaterialsProducerProperty(materialsProducerPropertyId, propertyDefinition);
		experimentBuilder.forceMaterialsProducerPropertyExperimentColumn(materialsProducerId, materialsProducerPropertyId);

		Experiment experiment = experimentBuilder.build();
		String expected = "materials_producer_property_value_assignment.MATERIALS_PRODUCER_1.MATERIALS_PRODUCER_PROPERTY_1";
		String actual = experiment.getExperimentFieldName(0);
		assertEquals(expected, actual);
	}

}
