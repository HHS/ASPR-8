package plugins.stochastics.resolvers;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497b;
import org.junit.jupiter.api.Test;

import nucleus.DataView;
import nucleus.Simulation;
import nucleus.Simulation.Builder;
import nucleus.ResolverContext;
import nucleus.testsupport.MockResolverContext;
import nucleus.testsupport.actionplugin.ActionPlugin;
import nucleus.testsupport.actionplugin.AgentActionPlan;
import plugins.stochastics.StochasticsPlugin;
import plugins.stochastics.datacontainers.StochasticsDataView;
import plugins.stochastics.events.mutation.StochasticsReseedEvent;
import plugins.stochastics.initialdata.StochasticsInitialData;
import plugins.stochastics.support.RandomNumberGeneratorId;
import plugins.stochastics.testsupport.TestRandomGeneratorId;
import util.annotations.UnitTest;
import util.annotations.UnitTestConstructor;
import util.annotations.UnitTestMethod;

@UnitTest(target = StochasticsResolver.class)
public class AT_StochasticsResolver {

	@Test
	@UnitTestConstructor(args = { StochasticsInitialData.class, long.class })
	public void testConstructor() {
		// test covered by the test of init()
	}

	@Test
	@UnitTestMethod(name = "init", args = { ResolverContext.class })
	public void testStochasticsReseedEvent() {
		Builder builder = Simulation.builder();
		long masterSeed = 508143430508125725L;

		StochasticsInitialData.Builder stochasticsBuilder = StochasticsInitialData.builder();
		for (TestRandomGeneratorId testRandomGeneratorId : TestRandomGeneratorId.values()) {
			stochasticsBuilder.addRandomGeneratorId(testRandomGeneratorId);
		}
		stochasticsBuilder.setSeed(masterSeed);

		builder.addPlugin(StochasticsPlugin.PLUGIN_ID, new StochasticsPlugin(stochasticsBuilder.build())::init);

		ActionPlugin.Builder pluginBuilder = ActionPlugin.builder();

		pluginBuilder.addAgent("agent");
		pluginBuilder.addAgentActionPlan("agent", new AgentActionPlan(1, (c) -> {
			StochasticsDataView stochasticsDataView = c.getDataView(StochasticsDataView.class).get();
			RandomGenerator randomGenerator = stochasticsDataView.getRandomGenerator();

			/*
			 * Establish the first long generated by each random number generator
			 */
			long expectedValue = randomGenerator.nextLong();

			Map<TestRandomGeneratorId, Long> expectedValues = new LinkedHashMap<>();
			for (TestRandomGeneratorId testRandomGeneratorId : TestRandomGeneratorId.values()) {
				long value = stochasticsDataView.getRandomGeneratorFromId(testRandomGeneratorId).nextLong();
				expectedValues.put(testRandomGeneratorId, value);
			}

			/*
			 * re-seed to a new seed and show that the initial longs returned
			 * changed for all generators
			 */
			c.resolveEvent(new StochasticsReseedEvent(3885859435446444843L));
			long actualValue = randomGenerator.nextLong();
			assertNotEquals(expectedValue, actualValue);
			for (TestRandomGeneratorId testRandomGeneratorId : TestRandomGeneratorId.values()) {
				actualValue = stochasticsDataView.getRandomGeneratorFromId(testRandomGeneratorId).nextLong();
				assertNotEquals(expectedValues.get(testRandomGeneratorId), actualValue);
			}

			/*
			 * re-seed back to the original seed and show that the initial longs
			 * returned for all generators are correct
			 */
			c.resolveEvent(new StochasticsReseedEvent(masterSeed));
			actualValue = randomGenerator.nextLong();
			assertEquals(expectedValue, actualValue);
			for (TestRandomGeneratorId testRandomGeneratorId : TestRandomGeneratorId.values()) {
				actualValue = stochasticsDataView.getRandomGeneratorFromId(testRandomGeneratorId).nextLong();
				assertEquals(expectedValues.get(testRandomGeneratorId), actualValue);
			}
		}));

		ActionPlugin actionPlugin = pluginBuilder.build();

		builder.addPlugin(ActionPlugin.PLUGIN_ID, actionPlugin::init);

		// build and execute the engine
		builder.build().execute();

		assertTrue(actionPlugin.allActionsExecuted());

	}

	@Test
	@UnitTestMethod(name = "init", args = { ResolverContext.class })
	public void testStochasticsDataViewInitialzation() {
		long seed = 745645785689L;

		// show that the stochastics data view is published and has the correct
		// state

		// show that we are contributing random generator ids
		assertTrue(TestRandomGeneratorId.values().length > 0);

		// build the initial data
		Set<TestRandomGeneratorId> expectedRandomGeneratorIds = new LinkedHashSet<>();
		StochasticsInitialData.Builder builder = StochasticsInitialData.builder();
		for (TestRandomGeneratorId testRandomGeneratorId : TestRandomGeneratorId.values()) {
			expectedRandomGeneratorIds.add(testRandomGeneratorId);
			builder.addRandomGeneratorId(testRandomGeneratorId);
		}
		builder.setSeed(seed);
		StochasticsInitialData stochasticsInitialData = builder.build();

		List<DataView> publishedDataViews = new ArrayList<>();

		// build the manager
		MockResolverContext mockResolverContext = MockResolverContext.builder().setPublishDataViewConsumer((d) -> publishedDataViews.add(d)).build();
		StochasticsResolver stochasticsResolver = new StochasticsResolver(stochasticsInitialData);
		stochasticsResolver.init(mockResolverContext);

		// show that only one data view was published
		assertEquals(1, publishedDataViews.size());

		// show that the published data view is not null
		DataView dataView = publishedDataViews.get(0);
		assertNotNull(dataView);

		// show that the published data view is a StochasticsDataView
		assertEquals(StochasticsDataView.class, dataView.getClass());

		StochasticsDataView stochasticsDataView = (StochasticsDataView) dataView;

		// show that the data view returns the correct random generator
		RandomGenerator randomGenerator = stochasticsDataView.getRandomGenerator();
		// show that the random generator is not null
		assertNotNull(randomGenerator);
		// show that the random generator is the expected implementor
		assertEquals(Well44497b.class, randomGenerator.getClass());

		// show that the random generator is likely to have been seeded
		// correctly
		Well44497b well44497b = new Well44497b(seed);
		for (int i = 0; i < 100; i++) {
			assertEquals(well44497b.nextLong(), randomGenerator.nextLong());
		}

		// show that the data view returns the correct random generator ids
		Set<RandomNumberGeneratorId> actualRandomNumberGeneratorIds = stochasticsDataView.getRandomNumberGeneratorIds();
		assertEquals(expectedRandomGeneratorIds, actualRandomNumberGeneratorIds);

		// show that the random generators associated with id values are correct
		for (TestRandomGeneratorId testRandomGeneratorId : TestRandomGeneratorId.values()) {
			// show that the data view returns the correct random generator
			randomGenerator = stochasticsDataView.getRandomGeneratorFromId(testRandomGeneratorId);
			// show that the random generator is not null
			assertNotNull(randomGenerator);
			// show that the random generator is the expected implementor
			assertEquals(Well44497b.class, randomGenerator.getClass());

			// show that the random generator is likely to have been seeded
			// correctly
			well44497b = new Well44497b(seed + testRandomGeneratorId.toString().hashCode());
			for (int i = 0; i < 100; i++) {
				assertEquals(well44497b.nextLong(), randomGenerator.nextLong());
			}
		}

	}

}
