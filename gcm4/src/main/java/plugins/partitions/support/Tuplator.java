package plugins.partitions.support;

import java.util.ArrayList;
import java.util.List;

/**
 * Utility class for generating tuples from a fixed set of finite ranges of the
 * form [0,n). Uses a standard builder pattern for construction.
 * 
 * 
 * 
 *
 */
public final class Tuplator {
	private final int[] moduli;
	private final int[] dimensions;
	private final int size;

	private Tuplator(List<Integer> dimensionSizes) {
		dimensions = new int[dimensionSizes.size()];
		moduli = new int[dimensionSizes.size()];

		int count = 1;
		for (int i = 0; i < dimensionSizes.size(); i++) {
			int dimSize = dimensionSizes.get(i);
			dimensions[i] = dimSize;
			moduli[i] = count;
			count *= dimSize;
		}
		size = count;
	}

	/**
	 * Returns the number of dimensions in this {@link Tuplator}.
	 */
	public int dimensions() {
		return dimensions.length;
	}

	/**
	 * Returns the number of tuples that can be generated by this
	 * {@link Tuplator}
	 */
	public int size() {
		return size;
	}

	/**
	 * Fills the given tuple with the values that correspond to the given index.
	 * 
	 * @throws IndexOutOfBoundsException
	 *             <li>if index < 0
	 *             <li>if index >= size()
	 * @throws IllegalArgumentException
	 *             <li>if the tuple is null
	 *             <li>if the tuple's length is not equal to dimensions()
	 * 
	 */
	public void fillTuple(int index, int[] tuple) {
		if ((index < 0) || (index >= size)) {
			throw new IndexOutOfBoundsException("index out of bounds");
		}
		
		if (tuple == null) {
			throw new IllegalArgumentException("null array");
		}
		
		if (tuple.length != dimensions.length) {
			throw new IllegalArgumentException("wrong number of dimensions");
		}

		for (int i = 0; i < dimensions.length; i++) {
			tuple[i] = (index / moduli[i]) % dimensions[i];
		}
	}

	public static Builder builder() {
		return new Builder();
	}

	public static class Builder {
		private List<Integer> dimensionSizes = new ArrayList<>();

		private Builder() {
		}

		public Tuplator build() {
			try {
				return new Tuplator(dimensionSizes);
			} finally {
				dimensionSizes = new ArrayList<>();
			}
		}

		public Builder addDimension(int dimensionSize) {
			if (dimensionSize <= 0) {
				throw new IllegalArgumentException("Non positive dimension size");
			}
			dimensionSizes.add(dimensionSize);
			return this;
		}
	}
}
